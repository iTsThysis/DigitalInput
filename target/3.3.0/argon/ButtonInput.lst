
/Users/darwinwang/Documents/IoT/ButtonInput/target/3.3.0/argon/ButtonInput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000013d4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b53f0  000b53f0  000053f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5414  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e63c  000b5418  0001e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000148  2003e6a8  2003e6a8  0002e6a8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5484  000b5484  00025484  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b54ac  000b54ac  000254ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000ea58e  00000000  00000000  000254b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000f722  00000000  00000000  0010fa3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000309d6  00000000  00000000  0011f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002598  00000000  00000000  0014fb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009060  00000000  00000000  001520ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033df2  00000000  00000000  0015b12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033c48  00000000  00000000  0018ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012b2d3  00000000  00000000  001c2b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006748  00000000  00000000  002ede3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 f819 	bl	b5064 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 f821 	bl	b5080 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e63c 	.word	0x2003e63c
   b4048:	000b5418 	.word	0x000b5418
   b404c:	2003e6a8 	.word	0x2003e6a8
   b4050:	2003e6a8 	.word	0x2003e6a8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fead 	bl	b4dbc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b53c0 	.word	0x000b53c0
   b407c:	000b53e4 	.word	0x000b53e4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f853 	bl	b4130 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 be4d 	b.w	b4d2c <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 baad 	b.w	b45f0 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bab3 	b.w	b4600 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b40aa:	b570      	push	{r4, r5, r6, lr}
   b40ac:	4605      	mov	r5, r0
   b40ae:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b40b0:	4616      	mov	r6, r2
   b40b2:	b942      	cbnz	r2, b40c6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b40b4:	6803      	ldr	r3, [r0, #0]
   b40b6:	b2c9      	uxtb	r1, r1
   b40b8:	689b      	ldr	r3, [r3, #8]
   b40ba:	4798      	blx	r3
        n += println();
   b40bc:	4628      	mov	r0, r5
    }
   b40be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b40c2:	f000 bca6 	b.w	b4a12 <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40c6:	2900      	cmp	r1, #0
   b40c8:	da0a      	bge.n	b40e0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b40ca:	2a0a      	cmp	r2, #10
   b40cc:	d108      	bne.n	b40e0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b40ce:	212d      	movs	r1, #45	; 0x2d
   b40d0:	f000 fc9c 	bl	b4a0c <_ZN5Print5printEc>
            val = -n;
   b40d4:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40d6:	b2f2      	uxtb	r2, r6
   b40d8:	4628      	mov	r0, r5
   b40da:	f000 fca6 	bl	b4a2a <_ZN5Print11printNumberEmh>
   b40de:	e7ed      	b.n	b40bc <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b40e0:	4621      	mov	r1, r4
   b40e2:	e7f8      	b.n	b40d6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b40e4 <setup>:
#define blue D7
#define potentiometer A5
bool changeRed = false;
bool changeGreen = false;
bool changeBlue = false;
void setup() {
   b40e4:	b508      	push	{r3, lr}
  pinMode(buttonRed, INPUT);
   b40e6:	2100      	movs	r1, #0
   b40e8:	2002      	movs	r0, #2
   b40ea:	f000 fed7 	bl	b4e9c <pinMode>
  pinMode(buttonGreen, INPUT);
   b40ee:	2100      	movs	r1, #0
   b40f0:	2003      	movs	r0, #3
   b40f2:	f000 fed3 	bl	b4e9c <pinMode>
  pinMode(buttonBlue, INPUT);
   b40f6:	2100      	movs	r1, #0
   b40f8:	2004      	movs	r0, #4
   b40fa:	f000 fecf 	bl	b4e9c <pinMode>
  pinMode(red, OUTPUT);
   b40fe:	2101      	movs	r1, #1
   b4100:	2005      	movs	r0, #5
   b4102:	f000 fecb 	bl	b4e9c <pinMode>
  pinMode(green, OUTPUT);
   b4106:	2101      	movs	r1, #1
   b4108:	2006      	movs	r0, #6
   b410a:	f000 fec7 	bl	b4e9c <pinMode>
  pinMode(blue, OUTPUT);
   b410e:	2101      	movs	r1, #1
   b4110:	2007      	movs	r0, #7
   b4112:	f000 fec3 	bl	b4e9c <pinMode>
  pinMode(potentiometer, INPUT);
   b4116:	2100      	movs	r1, #0
   b4118:	200e      	movs	r0, #14
   b411a:	f000 febf 	bl	b4e9c <pinMode>
  Serial.begin(9600);
   b411e:	f000 fd7f 	bl	b4c20 <_Z16_fetch_usbserialv>
}
   b4122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   b4126:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b412a:	f000 bd6d 	b.w	b4c08 <_ZN9USBSerial5beginEl>
	...

000b4130 <loop>:


void loop() {
   b4130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int buttonRed_OnOff = digitalRead(buttonRed);
   b4134:	2002      	movs	r0, #2
void loop() {
   b4136:	b085      	sub	sp, #20
  int buttonRed_OnOff = digitalRead(buttonRed);
   b4138:	f000 fec1 	bl	b4ebe <digitalRead>
   b413c:	4681      	mov	r9, r0
  int buttonGreen_OnOff = digitalRead(buttonGreen);
   b413e:	2003      	movs	r0, #3
   b4140:	f000 febd 	bl	b4ebe <digitalRead>
   b4144:	4680      	mov	r8, r0
  int buttonBlue_OnOff = digitalRead(buttonBlue);
   b4146:	2004      	movs	r0, #4
   b4148:	f000 feb9 	bl	b4ebe <digitalRead>
   b414c:	4607      	mov	r7, r0
  int bad_value = analogRead(potentiometer);
   b414e:	200e      	movs	r0, #14
   b4150:	f000 fec8 	bl	b4ee4 <analogRead>
  int value = map(bad_value, 0, 4095, 0, 255);
   b4154:	23ff      	movs	r3, #255	; 0xff
   b4156:	9300      	str	r3, [sp, #0]
   b4158:	2300      	movs	r3, #0
   b415a:	4619      	mov	r1, r3
   b415c:	f640 72ff 	movw	r2, #4095	; 0xfff
   b4160:	f000 fa66 	bl	b4630 <_Z3mapiiiii>
   b4164:	4e37      	ldr	r6, [pc, #220]	; (b4244 <loop+0x114>)
   b4166:	4d38      	ldr	r5, [pc, #224]	; (b4248 <loop+0x118>)
   b4168:	4c38      	ldr	r4, [pc, #224]	; (b424c <loop+0x11c>)

  if (buttonRed_OnOff == HIGH) {
   b416a:	f1b9 0f01 	cmp.w	r9, #1
    changeRed = true;
    changeGreen = false;
   b416e:	bf01      	itttt	eq
   b4170:	2300      	moveq	r3, #0
    changeRed = true;
   b4172:	f886 9000 	strbeq.w	r9, [r6]
    changeGreen = false;
   b4176:	702b      	strbeq	r3, [r5, #0]
    changeBlue = false;
   b4178:	7023      	strbeq	r3, [r4, #0]
  } 
  if (buttonGreen_OnOff == HIGH) {
   b417a:	f1b8 0f01 	cmp.w	r8, #1
  int value = map(bad_value, 0, 4095, 0, 255);
   b417e:	4601      	mov	r1, r0
  if (buttonGreen_OnOff == HIGH) {
   b4180:	d139      	bne.n	b41f6 <loop+0xc6>
    changeRed = false;
   b4182:	2300      	movs	r3, #0
    changeGreen = true;
    changeBlue = false;
  }
  if (buttonBlue_OnOff == HIGH) {
   b4184:	2f01      	cmp	r7, #1
    changeRed = false;
   b4186:	7033      	strb	r3, [r6, #0]
    changeGreen = true;
   b4188:	f885 8000 	strb.w	r8, [r5]
    changeBlue = false;
   b418c:	7023      	strb	r3, [r4, #0]
  if (buttonBlue_OnOff == HIGH) {
   b418e:	d147      	bne.n	b4220 <loop+0xf0>
    changeRed = false;
   b4190:	2300      	movs	r3, #0
   b4192:	7033      	strb	r3, [r6, #0]
    changeGreen = false;
   b4194:	702b      	strb	r3, [r5, #0]
    changeBlue = true;
   b4196:	2301      	movs	r3, #1
   b4198:	7023      	strb	r3, [r4, #0]
    int rgbGreen = value;
    analogWrite(green, rgbGreen);
    Serial.println(rgbGreen);
    delay(200);
  }
  if (changeBlue == true) {
   b419a:	7823      	ldrb	r3, [r4, #0]
   b419c:	b163      	cbz	r3, b41b8 <loop+0x88>
    int rgbBlue = value;
    analogWrite(blue, rgbBlue);
   b419e:	2007      	movs	r0, #7
   b41a0:	9103      	str	r1, [sp, #12]
   b41a2:	f000 feb6 	bl	b4f12 <_Z11analogWritetm>
    Serial.println(rgbBlue);
   b41a6:	f000 fd3b 	bl	b4c20 <_Z16_fetch_usbserialv>
   b41aa:	9903      	ldr	r1, [sp, #12]
   b41ac:	220a      	movs	r2, #10
   b41ae:	f7ff ff7c 	bl	b40aa <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    delay(200);
   b41b2:	20c8      	movs	r0, #200	; 0xc8
   b41b4:	f000 fa48 	bl	b4648 <delay>
  }
  
  if (buttonRed_OnOff == HIGH && buttonGreen_OnOff == HIGH && buttonBlue_OnOff == HIGH) {
   b41b8:	f1b9 0f01 	cmp.w	r9, #1
   b41bc:	d13f      	bne.n	b423e <loop+0x10e>
   b41be:	f1b8 0f01 	cmp.w	r8, #1
   b41c2:	d13c      	bne.n	b423e <loop+0x10e>
   b41c4:	2f01      	cmp	r7, #1
   b41c6:	d13a      	bne.n	b423e <loop+0x10e>
    analogWrite(red, 0);
   b41c8:	2100      	movs	r1, #0
   b41ca:	2005      	movs	r0, #5
   b41cc:	f000 fea1 	bl	b4f12 <_Z11analogWritetm>
    analogWrite(green, 0);
   b41d0:	2100      	movs	r1, #0
   b41d2:	2006      	movs	r0, #6
   b41d4:	f000 fe9d 	bl	b4f12 <_Z11analogWritetm>
    analogWrite(blue, 0);
   b41d8:	2100      	movs	r1, #0
   b41da:	2007      	movs	r0, #7
   b41dc:	f000 fe99 	bl	b4f12 <_Z11analogWritetm>
    changeRed = false;
   b41e0:	2300      	movs	r3, #0
    changeGreen = false;
    changeBlue = false;
    delay(1000);
   b41e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    changeRed = false;
   b41e6:	7033      	strb	r3, [r6, #0]
    changeGreen = false;
   b41e8:	702b      	strb	r3, [r5, #0]
    changeBlue = false;
   b41ea:	7023      	strb	r3, [r4, #0]
  }  
}
   b41ec:	b005      	add	sp, #20
   b41ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    delay(1000);
   b41f2:	f000 ba29 	b.w	b4648 <delay>
  if (buttonBlue_OnOff == HIGH) {
   b41f6:	2f01      	cmp	r7, #1
   b41f8:	d0ca      	beq.n	b4190 <loop+0x60>
  if (changeRed == true) {
   b41fa:	7833      	ldrb	r3, [r6, #0]
   b41fc:	b16b      	cbz	r3, b421a <loop+0xea>
    analogWrite(red, rgbRed);
   b41fe:	9003      	str	r0, [sp, #12]
   b4200:	2005      	movs	r0, #5
   b4202:	f000 fe86 	bl	b4f12 <_Z11analogWritetm>
    Serial.println(rgbRed);
   b4206:	f000 fd0b 	bl	b4c20 <_Z16_fetch_usbserialv>
   b420a:	9903      	ldr	r1, [sp, #12]
   b420c:	220a      	movs	r2, #10
   b420e:	f7ff ff4c 	bl	b40aa <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    delay(200);
   b4212:	20c8      	movs	r0, #200	; 0xc8
   b4214:	f000 fa18 	bl	b4648 <delay>
   b4218:	9903      	ldr	r1, [sp, #12]
  if (changeGreen == true) {
   b421a:	782b      	ldrb	r3, [r5, #0]
   b421c:	2b00      	cmp	r3, #0
   b421e:	d0bc      	beq.n	b419a <loop+0x6a>
    analogWrite(green, rgbGreen);
   b4220:	2006      	movs	r0, #6
   b4222:	9103      	str	r1, [sp, #12]
   b4224:	f000 fe75 	bl	b4f12 <_Z11analogWritetm>
    Serial.println(rgbGreen);
   b4228:	f000 fcfa 	bl	b4c20 <_Z16_fetch_usbserialv>
   b422c:	9903      	ldr	r1, [sp, #12]
   b422e:	220a      	movs	r2, #10
   b4230:	f7ff ff3b 	bl	b40aa <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    delay(200);
   b4234:	20c8      	movs	r0, #200	; 0xc8
   b4236:	f000 fa07 	bl	b4648 <delay>
   b423a:	9903      	ldr	r1, [sp, #12]
   b423c:	e7ad      	b.n	b419a <loop+0x6a>
}
   b423e:	b005      	add	sp, #20
   b4240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4244:	2003e6b6 	.word	0x2003e6b6
   b4248:	2003e6b5 	.word	0x2003e6b5
   b424c:	2003e6b4 	.word	0x2003e6b4

000b4250 <_GLOBAL__sub_I_SystemMode>:
   b4250:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4252:	4b07      	ldr	r3, [pc, #28]	; (b4270 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b4254:	4a07      	ldr	r2, [pc, #28]	; (b4274 <_GLOBAL__sub_I_SystemMode+0x24>)
   b4256:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4258:	2400      	movs	r4, #0
   b425a:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b425e:	2003      	movs	r0, #3
   b4260:	f000 f932 	bl	b44c8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4264:	4621      	mov	r1, r4
   b4266:	2001      	movs	r0, #1
}
   b4268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b426c:	f000 b93c 	b.w	b44e8 <system_thread_set_state>
   b4270:	2003e6a8 	.word	0x2003e6a8
   b4274:	ffff0000 	.word	0xffff0000

000b4278 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4278:	b508      	push	{r3, lr}
   b427a:	4b02      	ldr	r3, [pc, #8]	; (b4284 <os_mutex_recursive_create+0xc>)
   b427c:	681b      	ldr	r3, [r3, #0]
   b427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4280:	9301      	str	r3, [sp, #4]
   b4282:	bd08      	pop	{r3, pc}
   b4284:	00030248 	.word	0x00030248

000b4288 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4288:	b508      	push	{r3, lr}
   b428a:	4b02      	ldr	r3, [pc, #8]	; (b4294 <HAL_RNG_GetRandomNumber+0xc>)
   b428c:	681b      	ldr	r3, [r3, #0]
   b428e:	685b      	ldr	r3, [r3, #4]
   b4290:	9301      	str	r3, [sp, #4]
   b4292:	bd08      	pop	{r3, pc}
   b4294:	00030218 	.word	0x00030218

000b4298 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4298:	b508      	push	{r3, lr}
   b429a:	4b02      	ldr	r3, [pc, #8]	; (b42a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b429c:	681b      	ldr	r3, [r3, #0]
   b429e:	695b      	ldr	r3, [r3, #20]
   b42a0:	9301      	str	r3, [sp, #4]
   b42a2:	bd08      	pop	{r3, pc}
   b42a4:	00030218 	.word	0x00030218

000b42a8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b42a8:	b508      	push	{r3, lr}
   b42aa:	4b02      	ldr	r3, [pc, #8]	; (b42b4 <HAL_Validate_Pin_Function+0xc>)
   b42ac:	681b      	ldr	r3, [r3, #0]
   b42ae:	685b      	ldr	r3, [r3, #4]
   b42b0:	9301      	str	r3, [sp, #4]
   b42b2:	bd08      	pop	{r3, pc}
   b42b4:	0003022c 	.word	0x0003022c

000b42b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b42b8:	b508      	push	{r3, lr}
   b42ba:	4b02      	ldr	r3, [pc, #8]	; (b42c4 <HAL_Pin_Mode+0xc>)
   b42bc:	681b      	ldr	r3, [r3, #0]
   b42be:	689b      	ldr	r3, [r3, #8]
   b42c0:	9301      	str	r3, [sp, #4]
   b42c2:	bd08      	pop	{r3, pc}
   b42c4:	0003022c 	.word	0x0003022c

000b42c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b42c8:	b508      	push	{r3, lr}
   b42ca:	4b02      	ldr	r3, [pc, #8]	; (b42d4 <HAL_Get_Pin_Mode+0xc>)
   b42cc:	681b      	ldr	r3, [r3, #0]
   b42ce:	68db      	ldr	r3, [r3, #12]
   b42d0:	9301      	str	r3, [sp, #4]
   b42d2:	bd08      	pop	{r3, pc}
   b42d4:	0003022c 	.word	0x0003022c

000b42d8 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b42d8:	b508      	push	{r3, lr}
   b42da:	4b02      	ldr	r3, [pc, #8]	; (b42e4 <HAL_GPIO_Read+0xc>)
   b42dc:	681b      	ldr	r3, [r3, #0]
   b42de:	695b      	ldr	r3, [r3, #20]
   b42e0:	9301      	str	r3, [sp, #4]
   b42e2:	bd08      	pop	{r3, pc}
   b42e4:	0003022c 	.word	0x0003022c

000b42e8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b42e8:	b508      	push	{r3, lr}
   b42ea:	4b02      	ldr	r3, [pc, #8]	; (b42f4 <HAL_DAC_Write+0xc>)
   b42ec:	681b      	ldr	r3, [r3, #0]
   b42ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b42f0:	9301      	str	r3, [sp, #4]
   b42f2:	bd08      	pop	{r3, pc}
   b42f4:	0003022c 	.word	0x0003022c

000b42f8 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b42f8:	b508      	push	{r3, lr}
   b42fa:	4b02      	ldr	r3, [pc, #8]	; (b4304 <hal_adc_read+0xc>)
   b42fc:	681b      	ldr	r3, [r3, #0]
   b42fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4300:	9301      	str	r3, [sp, #4]
   b4302:	bd08      	pop	{r3, pc}
   b4304:	0003022c 	.word	0x0003022c

000b4308 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b4308:	b508      	push	{r3, lr}
   b430a:	4b02      	ldr	r3, [pc, #8]	; (b4314 <hal_pwm_write_ext+0xc>)
   b430c:	681b      	ldr	r3, [r3, #0]
   b430e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b4310:	9301      	str	r3, [sp, #4]
   b4312:	bd08      	pop	{r3, pc}
   b4314:	0003022c 	.word	0x0003022c

000b4318 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4318:	b508      	push	{r3, lr}
   b431a:	4b02      	ldr	r3, [pc, #8]	; (b4324 <hal_i2c_write+0xc>)
   b431c:	681b      	ldr	r3, [r3, #0]
   b431e:	6a1b      	ldr	r3, [r3, #32]
   b4320:	9301      	str	r3, [sp, #4]
   b4322:	bd08      	pop	{r3, pc}
   b4324:	00030228 	.word	0x00030228

000b4328 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4328:	b508      	push	{r3, lr}
   b432a:	4b02      	ldr	r3, [pc, #8]	; (b4334 <hal_i2c_available+0xc>)
   b432c:	681b      	ldr	r3, [r3, #0]
   b432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4330:	9301      	str	r3, [sp, #4]
   b4332:	bd08      	pop	{r3, pc}
   b4334:	00030228 	.word	0x00030228

000b4338 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4338:	b508      	push	{r3, lr}
   b433a:	4b02      	ldr	r3, [pc, #8]	; (b4344 <hal_i2c_read+0xc>)
   b433c:	681b      	ldr	r3, [r3, #0]
   b433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4340:	9301      	str	r3, [sp, #4]
   b4342:	bd08      	pop	{r3, pc}
   b4344:	00030228 	.word	0x00030228

000b4348 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4348:	b508      	push	{r3, lr}
   b434a:	4b02      	ldr	r3, [pc, #8]	; (b4354 <hal_i2c_peek+0xc>)
   b434c:	681b      	ldr	r3, [r3, #0]
   b434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4350:	9301      	str	r3, [sp, #4]
   b4352:	bd08      	pop	{r3, pc}
   b4354:	00030228 	.word	0x00030228

000b4358 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4358:	b508      	push	{r3, lr}
   b435a:	4b02      	ldr	r3, [pc, #8]	; (b4364 <hal_i2c_flush+0xc>)
   b435c:	681b      	ldr	r3, [r3, #0]
   b435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4360:	9301      	str	r3, [sp, #4]
   b4362:	bd08      	pop	{r3, pc}
   b4364:	00030228 	.word	0x00030228

000b4368 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4368:	b508      	push	{r3, lr}
   b436a:	4b02      	ldr	r3, [pc, #8]	; (b4374 <hal_i2c_is_enabled+0xc>)
   b436c:	681b      	ldr	r3, [r3, #0]
   b436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4370:	9301      	str	r3, [sp, #4]
   b4372:	bd08      	pop	{r3, pc}
   b4374:	00030228 	.word	0x00030228

000b4378 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4378:	b508      	push	{r3, lr}
   b437a:	4b02      	ldr	r3, [pc, #8]	; (b4384 <hal_i2c_init+0xc>)
   b437c:	681b      	ldr	r3, [r3, #0]
   b437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4380:	9301      	str	r3, [sp, #4]
   b4382:	bd08      	pop	{r3, pc}
   b4384:	00030228 	.word	0x00030228

000b4388 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4388:	b508      	push	{r3, lr}
   b438a:	4b02      	ldr	r3, [pc, #8]	; (b4394 <inet_inet_ntop+0xc>)
   b438c:	681b      	ldr	r3, [r3, #0]
   b438e:	695b      	ldr	r3, [r3, #20]
   b4390:	9301      	str	r3, [sp, #4]
   b4392:	bd08      	pop	{r3, pc}
   b4394:	00030264 	.word	0x00030264

000b4398 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4398:	b508      	push	{r3, lr}
   b439a:	4b02      	ldr	r3, [pc, #8]	; (b43a4 <netdb_freeaddrinfo+0xc>)
   b439c:	681b      	ldr	r3, [r3, #0]
   b439e:	689b      	ldr	r3, [r3, #8]
   b43a0:	9301      	str	r3, [sp, #4]
   b43a2:	bd08      	pop	{r3, pc}
   b43a4:	00030268 	.word	0x00030268

000b43a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b43a8:	b508      	push	{r3, lr}
   b43aa:	4b02      	ldr	r3, [pc, #8]	; (b43b4 <netdb_getaddrinfo+0xc>)
   b43ac:	681b      	ldr	r3, [r3, #0]
   b43ae:	68db      	ldr	r3, [r3, #12]
   b43b0:	9301      	str	r3, [sp, #4]
   b43b2:	bd08      	pop	{r3, pc}
   b43b4:	00030268 	.word	0x00030268

000b43b8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b43b8:	b508      	push	{r3, lr}
   b43ba:	4b02      	ldr	r3, [pc, #8]	; (b43c4 <hal_spi_init+0xc>)
   b43bc:	681b      	ldr	r3, [r3, #0]
   b43be:	69db      	ldr	r3, [r3, #28]
   b43c0:	9301      	str	r3, [sp, #4]
   b43c2:	bd08      	pop	{r3, pc}
   b43c4:	00030230 	.word	0x00030230

000b43c8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b43c8:	b508      	push	{r3, lr}
   b43ca:	4b02      	ldr	r3, [pc, #8]	; (b43d4 <hal_spi_is_enabled+0xc>)
   b43cc:	681b      	ldr	r3, [r3, #0]
   b43ce:	6a1b      	ldr	r3, [r3, #32]
   b43d0:	9301      	str	r3, [sp, #4]
   b43d2:	bd08      	pop	{r3, pc}
   b43d4:	00030230 	.word	0x00030230

000b43d8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b43d8:	b508      	push	{r3, lr}
   b43da:	4b02      	ldr	r3, [pc, #8]	; (b43e4 <hal_usart_write+0xc>)
   b43dc:	681b      	ldr	r3, [r3, #0]
   b43de:	68db      	ldr	r3, [r3, #12]
   b43e0:	9301      	str	r3, [sp, #4]
   b43e2:	bd08      	pop	{r3, pc}
   b43e4:	0003023c 	.word	0x0003023c

000b43e8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43e8:	b508      	push	{r3, lr}
   b43ea:	4b02      	ldr	r3, [pc, #8]	; (b43f4 <hal_usart_available+0xc>)
   b43ec:	681b      	ldr	r3, [r3, #0]
   b43ee:	691b      	ldr	r3, [r3, #16]
   b43f0:	9301      	str	r3, [sp, #4]
   b43f2:	bd08      	pop	{r3, pc}
   b43f4:	0003023c 	.word	0x0003023c

000b43f8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43f8:	b508      	push	{r3, lr}
   b43fa:	4b02      	ldr	r3, [pc, #8]	; (b4404 <hal_usart_read+0xc>)
   b43fc:	681b      	ldr	r3, [r3, #0]
   b43fe:	695b      	ldr	r3, [r3, #20]
   b4400:	9301      	str	r3, [sp, #4]
   b4402:	bd08      	pop	{r3, pc}
   b4404:	0003023c 	.word	0x0003023c

000b4408 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4408:	b508      	push	{r3, lr}
   b440a:	4b02      	ldr	r3, [pc, #8]	; (b4414 <hal_usart_peek+0xc>)
   b440c:	681b      	ldr	r3, [r3, #0]
   b440e:	699b      	ldr	r3, [r3, #24]
   b4410:	9301      	str	r3, [sp, #4]
   b4412:	bd08      	pop	{r3, pc}
   b4414:	0003023c 	.word	0x0003023c

000b4418 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4418:	b508      	push	{r3, lr}
   b441a:	4b02      	ldr	r3, [pc, #8]	; (b4424 <hal_usart_flush+0xc>)
   b441c:	681b      	ldr	r3, [r3, #0]
   b441e:	69db      	ldr	r3, [r3, #28]
   b4420:	9301      	str	r3, [sp, #4]
   b4422:	bd08      	pop	{r3, pc}
   b4424:	0003023c 	.word	0x0003023c

000b4428 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4428:	b508      	push	{r3, lr}
   b442a:	4b02      	ldr	r3, [pc, #8]	; (b4434 <hal_usart_is_enabled+0xc>)
   b442c:	681b      	ldr	r3, [r3, #0]
   b442e:	6a1b      	ldr	r3, [r3, #32]
   b4430:	9301      	str	r3, [sp, #4]
   b4432:	bd08      	pop	{r3, pc}
   b4434:	0003023c 	.word	0x0003023c

000b4438 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4438:	b508      	push	{r3, lr}
   b443a:	4b02      	ldr	r3, [pc, #8]	; (b4444 <hal_usart_available_data_for_write+0xc>)
   b443c:	681b      	ldr	r3, [r3, #0]
   b443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4440:	9301      	str	r3, [sp, #4]
   b4442:	bd08      	pop	{r3, pc}
   b4444:	0003023c 	.word	0x0003023c

000b4448 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4448:	b508      	push	{r3, lr}
   b444a:	4b02      	ldr	r3, [pc, #8]	; (b4454 <hal_usart_init_ex+0xc>)
   b444c:	681b      	ldr	r3, [r3, #0]
   b444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4450:	9301      	str	r3, [sp, #4]
   b4452:	bd08      	pop	{r3, pc}
   b4454:	0003023c 	.word	0x0003023c

000b4458 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4458:	b508      	push	{r3, lr}
   b445a:	4b02      	ldr	r3, [pc, #8]	; (b4464 <HAL_USB_USART_Init+0xc>)
   b445c:	681b      	ldr	r3, [r3, #0]
   b445e:	681b      	ldr	r3, [r3, #0]
   b4460:	9301      	str	r3, [sp, #4]
   b4462:	bd08      	pop	{r3, pc}
   b4464:	0003024c 	.word	0x0003024c

000b4468 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4468:	b508      	push	{r3, lr}
   b446a:	4b02      	ldr	r3, [pc, #8]	; (b4474 <HAL_USB_USART_Begin+0xc>)
   b446c:	681b      	ldr	r3, [r3, #0]
   b446e:	685b      	ldr	r3, [r3, #4]
   b4470:	9301      	str	r3, [sp, #4]
   b4472:	bd08      	pop	{r3, pc}
   b4474:	0003024c 	.word	0x0003024c

000b4478 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b02      	ldr	r3, [pc, #8]	; (b4484 <HAL_USB_USART_Available_Data+0xc>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	691b      	ldr	r3, [r3, #16]
   b4480:	9301      	str	r3, [sp, #4]
   b4482:	bd08      	pop	{r3, pc}
   b4484:	0003024c 	.word	0x0003024c

000b4488 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4488:	b508      	push	{r3, lr}
   b448a:	4b02      	ldr	r3, [pc, #8]	; (b4494 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b448c:	681b      	ldr	r3, [r3, #0]
   b448e:	695b      	ldr	r3, [r3, #20]
   b4490:	9301      	str	r3, [sp, #4]
   b4492:	bd08      	pop	{r3, pc}
   b4494:	0003024c 	.word	0x0003024c

000b4498 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4498:	b508      	push	{r3, lr}
   b449a:	4b02      	ldr	r3, [pc, #8]	; (b44a4 <HAL_USB_USART_Receive_Data+0xc>)
   b449c:	681b      	ldr	r3, [r3, #0]
   b449e:	699b      	ldr	r3, [r3, #24]
   b44a0:	9301      	str	r3, [sp, #4]
   b44a2:	bd08      	pop	{r3, pc}
   b44a4:	0003024c 	.word	0x0003024c

000b44a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b02      	ldr	r3, [pc, #8]	; (b44b4 <HAL_USB_USART_Send_Data+0xc>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	69db      	ldr	r3, [r3, #28]
   b44b0:	9301      	str	r3, [sp, #4]
   b44b2:	bd08      	pop	{r3, pc}
   b44b4:	0003024c 	.word	0x0003024c

000b44b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b44b8:	b508      	push	{r3, lr}
   b44ba:	4b02      	ldr	r3, [pc, #8]	; (b44c4 <HAL_USB_USART_Flush_Data+0xc>)
   b44bc:	681b      	ldr	r3, [r3, #0]
   b44be:	6a1b      	ldr	r3, [r3, #32]
   b44c0:	9301      	str	r3, [sp, #4]
   b44c2:	bd08      	pop	{r3, pc}
   b44c4:	0003024c 	.word	0x0003024c

000b44c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b02      	ldr	r3, [pc, #8]	; (b44d4 <set_system_mode+0xc>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	685b      	ldr	r3, [r3, #4]
   b44d0:	9301      	str	r3, [sp, #4]
   b44d2:	bd08      	pop	{r3, pc}
   b44d4:	00030220 	.word	0x00030220

000b44d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b44d8:	b508      	push	{r3, lr}
   b44da:	4b02      	ldr	r3, [pc, #8]	; (b44e4 <system_delay_ms+0xc>)
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	695b      	ldr	r3, [r3, #20]
   b44e0:	9301      	str	r3, [sp, #4]
   b44e2:	bd08      	pop	{r3, pc}
   b44e4:	00030220 	.word	0x00030220

000b44e8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <system_thread_set_state+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	00030220 	.word	0x00030220

000b44f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b03      	ldr	r3, [pc, #12]	; (b4508 <system_ctrl_set_app_request_handler+0x10>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4502:	9301      	str	r3, [sp, #4]
   b4504:	bd08      	pop	{r3, pc}
   b4506:	0000      	.short	0x0000
   b4508:	00030220 	.word	0x00030220

000b450c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b03      	ldr	r3, [pc, #12]	; (b451c <system_ctrl_set_result+0x10>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4516:	9301      	str	r3, [sp, #4]
   b4518:	bd08      	pop	{r3, pc}
   b451a:	0000      	.short	0x0000
   b451c:	00030220 	.word	0x00030220

000b4520 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b02      	ldr	r3, [pc, #8]	; (b452c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4528:	9301      	str	r3, [sp, #4]
   b452a:	bd08      	pop	{r3, pc}
   b452c:	00030244 	.word	0x00030244

000b4530 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4530:	b508      	push	{r3, lr}
   b4532:	4b02      	ldr	r3, [pc, #8]	; (b453c <network_connect+0xc>)
   b4534:	681b      	ldr	r3, [r3, #0]
   b4536:	685b      	ldr	r3, [r3, #4]
   b4538:	9301      	str	r3, [sp, #4]
   b453a:	bd08      	pop	{r3, pc}
   b453c:	00030240 	.word	0x00030240

000b4540 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4540:	b508      	push	{r3, lr}
   b4542:	4b02      	ldr	r3, [pc, #8]	; (b454c <network_connecting+0xc>)
   b4544:	681b      	ldr	r3, [r3, #0]
   b4546:	689b      	ldr	r3, [r3, #8]
   b4548:	9301      	str	r3, [sp, #4]
   b454a:	bd08      	pop	{r3, pc}
   b454c:	00030240 	.word	0x00030240

000b4550 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4550:	b508      	push	{r3, lr}
   b4552:	4b02      	ldr	r3, [pc, #8]	; (b455c <network_disconnect+0xc>)
   b4554:	681b      	ldr	r3, [r3, #0]
   b4556:	68db      	ldr	r3, [r3, #12]
   b4558:	9301      	str	r3, [sp, #4]
   b455a:	bd08      	pop	{r3, pc}
   b455c:	00030240 	.word	0x00030240

000b4560 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4560:	b508      	push	{r3, lr}
   b4562:	4b02      	ldr	r3, [pc, #8]	; (b456c <network_ready+0xc>)
   b4564:	681b      	ldr	r3, [r3, #0]
   b4566:	691b      	ldr	r3, [r3, #16]
   b4568:	9301      	str	r3, [sp, #4]
   b456a:	bd08      	pop	{r3, pc}
   b456c:	00030240 	.word	0x00030240

000b4570 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <network_on+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	695b      	ldr	r3, [r3, #20]
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	00030240 	.word	0x00030240

000b4580 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <network_off+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	699b      	ldr	r3, [r3, #24]
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030240 	.word	0x00030240

000b4590 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <network_listen+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	69db      	ldr	r3, [r3, #28]
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	00030240 	.word	0x00030240

000b45a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <network_listening+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	6a1b      	ldr	r3, [r3, #32]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	00030240 	.word	0x00030240

000b45b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <network_set_listen_timeout+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	00030240 	.word	0x00030240

000b45c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <network_get_listen_timeout+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	00030240 	.word	0x00030240

000b45d0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <network_is_on+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	00030240 	.word	0x00030240

000b45e0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <network_is_off+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030240 	.word	0x00030240

000b45f0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <malloc+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	681b      	ldr	r3, [r3, #0]
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	0003021c 	.word	0x0003021c

000b4600 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <free+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	685b      	ldr	r3, [r3, #4]
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	0003021c 	.word	0x0003021c

000b4610 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <__assert_func+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	0003021c 	.word	0x0003021c

000b4620 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <newlib_impure_ptr_callback+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	0003021c 	.word	0x0003021c

000b4630 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b4630:	428a      	cmp	r2, r1
{
   b4632:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b4634:	d007      	beq.n	b4646 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b4636:	1a44      	subs	r4, r0, r1
   b4638:	9802      	ldr	r0, [sp, #8]
   b463a:	1ac0      	subs	r0, r0, r3
   b463c:	4344      	muls	r4, r0
   b463e:	1a50      	subs	r0, r2, r1
   b4640:	fb94 f0f0 	sdiv	r0, r4, r0
   b4644:	4418      	add	r0, r3
}
   b4646:	bd10      	pop	{r4, pc}

000b4648 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4648:	2100      	movs	r1, #0
   b464a:	f7ff bf45 	b.w	b44d8 <system_delay_ms>
	...

000b4650 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4650:	4802      	ldr	r0, [pc, #8]	; (b465c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4652:	2300      	movs	r3, #0
   b4654:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4656:	f7ff be0f 	b.w	b4278 <os_mutex_recursive_create>
   b465a:	bf00      	nop
   b465c:	2003e6b8 	.word	0x2003e6b8

000b4660 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4660:	2200      	movs	r2, #0
   b4662:	6840      	ldr	r0, [r0, #4]
   b4664:	4611      	mov	r1, r2
   b4666:	f7ff bf9b 	b.w	b45a0 <network_listening>

000b466a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b466a:	2200      	movs	r2, #0
   b466c:	6840      	ldr	r0, [r0, #4]
   b466e:	4611      	mov	r1, r2
   b4670:	f7ff bfa6 	b.w	b45c0 <network_get_listen_timeout>

000b4674 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4674:	6840      	ldr	r0, [r0, #4]
   b4676:	2200      	movs	r2, #0
   b4678:	f7ff bf9a 	b.w	b45b0 <network_set_listen_timeout>

000b467c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b467c:	6840      	ldr	r0, [r0, #4]
   b467e:	2200      	movs	r2, #0
   b4680:	f081 0101 	eor.w	r1, r1, #1
   b4684:	f7ff bf84 	b.w	b4590 <network_listen>

000b4688 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4688:	2300      	movs	r3, #0
   b468a:	6840      	ldr	r0, [r0, #4]
   b468c:	461a      	mov	r2, r3
   b468e:	4619      	mov	r1, r3
   b4690:	f7ff bf76 	b.w	b4580 <network_off>

000b4694 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4694:	2300      	movs	r3, #0
   b4696:	6840      	ldr	r0, [r0, #4]
   b4698:	461a      	mov	r2, r3
   b469a:	4619      	mov	r1, r3
   b469c:	f7ff bf68 	b.w	b4570 <network_on>

000b46a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b46a0:	2200      	movs	r2, #0
   b46a2:	6840      	ldr	r0, [r0, #4]
   b46a4:	4611      	mov	r1, r2
   b46a6:	f7ff bf5b 	b.w	b4560 <network_ready>

000b46aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b46aa:	2200      	movs	r2, #0
   b46ac:	6840      	ldr	r0, [r0, #4]
   b46ae:	4611      	mov	r1, r2
   b46b0:	f7ff bf46 	b.w	b4540 <network_connecting>

000b46b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b46b4:	6840      	ldr	r0, [r0, #4]
   b46b6:	2200      	movs	r2, #0
   b46b8:	2102      	movs	r1, #2
   b46ba:	f7ff bf49 	b.w	b4550 <network_disconnect>

000b46be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b46be:	2300      	movs	r3, #0
   b46c0:	6840      	ldr	r0, [r0, #4]
   b46c2:	461a      	mov	r2, r3
   b46c4:	f7ff bf34 	b.w	b4530 <network_connect>

000b46c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b46c8:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b46ca:	2203      	movs	r2, #3
   b46cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b46ce:	4a02      	ldr	r2, [pc, #8]	; (b46d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b46d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b46d2:	4770      	bx	lr
   b46d4:	2003e6bc 	.word	0x2003e6bc
   b46d8:	000b51e4 	.word	0x000b51e4

000b46dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b46dc:	4770      	bx	lr

000b46de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b46de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b46e0:	4606      	mov	r6, r0
   b46e2:	4615      	mov	r5, r2
   b46e4:	460c      	mov	r4, r1
   b46e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b46e8:	42bc      	cmp	r4, r7
   b46ea:	d006      	beq.n	b46fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b46ec:	6833      	ldr	r3, [r6, #0]
   b46ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   b46f2:	689b      	ldr	r3, [r3, #8]
   b46f4:	4630      	mov	r0, r6
   b46f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b46f8:	e7f6      	b.n	b46e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b46fa:	4628      	mov	r0, r5
   b46fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b46fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b46fe:	7c00      	ldrb	r0, [r0, #16]
   b4700:	2200      	movs	r2, #0
   b4702:	f7ff be09 	b.w	b4318 <hal_i2c_write>

000b4706 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4706:	7c00      	ldrb	r0, [r0, #16]
   b4708:	2100      	movs	r1, #0
   b470a:	f7ff be0d 	b.w	b4328 <hal_i2c_available>

000b470e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b470e:	7c00      	ldrb	r0, [r0, #16]
   b4710:	2100      	movs	r1, #0
   b4712:	f7ff be11 	b.w	b4338 <hal_i2c_read>

000b4716 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4716:	7c00      	ldrb	r0, [r0, #16]
   b4718:	2100      	movs	r1, #0
   b471a:	f7ff be15 	b.w	b4348 <hal_i2c_peek>

000b471e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b471e:	7c00      	ldrb	r0, [r0, #16]
   b4720:	2100      	movs	r1, #0
   b4722:	f7ff be19 	b.w	b4358 <hal_i2c_flush>

000b4726 <_ZN7TwoWireD0Ev>:
   b4726:	b510      	push	{r4, lr}
   b4728:	2114      	movs	r1, #20
   b472a:	4604      	mov	r4, r0
   b472c:	f7ff fcb3 	bl	b4096 <_ZdlPvj>
   b4730:	4620      	mov	r0, r4
   b4732:	bd10      	pop	{r4, pc}

000b4734 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4734:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b473a:	4604      	mov	r4, r0
   b473c:	4608      	mov	r0, r1
   b473e:	2100      	movs	r1, #0
   b4740:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4744:	4b03      	ldr	r3, [pc, #12]	; (b4754 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4746:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4748:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b474a:	4611      	mov	r1, r2
   b474c:	f7ff fe14 	bl	b4378 <hal_i2c_init>
}
   b4750:	4620      	mov	r0, r4
   b4752:	bd10      	pop	{r4, pc}
   b4754:	000b5220 	.word	0x000b5220

000b4758 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4758:	4770      	bx	lr

000b475a <_ZN9IPAddressD0Ev>:
   b475a:	b510      	push	{r4, lr}
   b475c:	2118      	movs	r1, #24
   b475e:	4604      	mov	r4, r0
   b4760:	f7ff fc99 	bl	b4096 <_ZdlPvj>
   b4764:	4620      	mov	r0, r4
   b4766:	bd10      	pop	{r4, pc}

000b4768 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4768:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b476a:	7d03      	ldrb	r3, [r0, #20]
   b476c:	2b06      	cmp	r3, #6
{
   b476e:	b08d      	sub	sp, #52	; 0x34
   b4770:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4772:	f100 0704 	add.w	r7, r0, #4
   b4776:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b477a:	d012      	beq.n	b47a2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b477c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4780:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4784:	220a      	movs	r2, #10
   b4786:	4630      	mov	r0, r6
   b4788:	f000 f94f 	bl	b4a2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b478c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b478e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4790:	d019      	beq.n	b47c6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4792:	2c00      	cmp	r4, #0
   b4794:	d0f4      	beq.n	b4780 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4796:	212e      	movs	r1, #46	; 0x2e
   b4798:	4630      	mov	r0, r6
   b479a:	f000 f937 	bl	b4a0c <_ZN5Print5printEc>
   b479e:	4404      	add	r4, r0
   b47a0:	e7ee      	b.n	b4780 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b47a2:	232f      	movs	r3, #47	; 0x2f
   b47a4:	466a      	mov	r2, sp
   b47a6:	4639      	mov	r1, r7
   b47a8:	200a      	movs	r0, #10
		buf[0] = 0;
   b47aa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b47ae:	f7ff fdeb 	bl	b4388 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b47b2:	4668      	mov	r0, sp
   b47b4:	f000 fc9a 	bl	b50ec <strlen>
   b47b8:	6833      	ldr	r3, [r6, #0]
   b47ba:	4602      	mov	r2, r0
   b47bc:	68db      	ldr	r3, [r3, #12]
   b47be:	4669      	mov	r1, sp
   b47c0:	4630      	mov	r0, r6
   b47c2:	4798      	blx	r3
   b47c4:	4604      	mov	r4, r0
    }
    return n;
}
   b47c6:	4620      	mov	r0, r4
   b47c8:	b00d      	add	sp, #52	; 0x34
   b47ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b47cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b47cc:	b510      	push	{r4, lr}
   b47ce:	4b05      	ldr	r3, [pc, #20]	; (b47e4 <_ZN9IPAddressC1Ev+0x18>)
   b47d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b47d2:	2211      	movs	r2, #17
   b47d4:	f840 3b04 	str.w	r3, [r0], #4
   b47d8:	2100      	movs	r1, #0
   b47da:	f000 fc51 	bl	b5080 <memset>
}
   b47de:	4620      	mov	r0, r4
   b47e0:	bd10      	pop	{r4, pc}
   b47e2:	bf00      	nop
   b47e4:	000b5248 	.word	0x000b5248

000b47e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b47e8:	4603      	mov	r3, r0
   b47ea:	4a07      	ldr	r2, [pc, #28]	; (b4808 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b47ec:	b510      	push	{r4, lr}
   b47ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b47f2:	f101 0210 	add.w	r2, r1, #16
   b47f6:	f851 4b04 	ldr.w	r4, [r1], #4
   b47fa:	f843 4b04 	str.w	r4, [r3], #4
   b47fe:	4291      	cmp	r1, r2
   b4800:	d1f9      	bne.n	b47f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4802:	780a      	ldrb	r2, [r1, #0]
   b4804:	701a      	strb	r2, [r3, #0]
}
   b4806:	bd10      	pop	{r4, pc}
   b4808:	000b5248 	.word	0x000b5248

000b480c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b480c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b480e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4812:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4816:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b481a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b481e:	2304      	movs	r3, #4
   b4820:	6041      	str	r1, [r0, #4]
   b4822:	7503      	strb	r3, [r0, #20]
}
   b4824:	bd10      	pop	{r4, pc}
	...

000b4828 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4828:	b507      	push	{r0, r1, r2, lr}
   b482a:	4b06      	ldr	r3, [pc, #24]	; (b4844 <_ZN9IPAddressC1EPKh+0x1c>)
   b482c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b482e:	78cb      	ldrb	r3, [r1, #3]
   b4830:	9300      	str	r3, [sp, #0]
   b4832:	788b      	ldrb	r3, [r1, #2]
   b4834:	784a      	ldrb	r2, [r1, #1]
   b4836:	7809      	ldrb	r1, [r1, #0]
   b4838:	f7ff ffe8 	bl	b480c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b483c:	b003      	add	sp, #12
   b483e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4842:	bf00      	nop
   b4844:	000b5248 	.word	0x000b5248

000b4848 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4848:	4b01      	ldr	r3, [pc, #4]	; (b4850 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b484a:	4a02      	ldr	r2, [pc, #8]	; (b4854 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b484c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b484e:	4770      	bx	lr
   b4850:	2003e6c4 	.word	0x2003e6c4
   b4854:	000b5254 	.word	0x000b5254

000b4858 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4858:	2300      	movs	r3, #0
   b485a:	6840      	ldr	r0, [r0, #4]
   b485c:	461a      	mov	r2, r3
   b485e:	f7ff be67 	b.w	b4530 <network_connect>

000b4862 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4862:	6840      	ldr	r0, [r0, #4]
   b4864:	2200      	movs	r2, #0
   b4866:	2102      	movs	r1, #2
   b4868:	f7ff be72 	b.w	b4550 <network_disconnect>

000b486c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b486c:	2200      	movs	r2, #0
   b486e:	6840      	ldr	r0, [r0, #4]
   b4870:	4611      	mov	r1, r2
   b4872:	f7ff be65 	b.w	b4540 <network_connecting>

000b4876 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4876:	2200      	movs	r2, #0
   b4878:	6840      	ldr	r0, [r0, #4]
   b487a:	4611      	mov	r1, r2
   b487c:	f7ff be70 	b.w	b4560 <network_ready>

000b4880 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4880:	2300      	movs	r3, #0
   b4882:	6840      	ldr	r0, [r0, #4]
   b4884:	461a      	mov	r2, r3
   b4886:	4619      	mov	r1, r3
   b4888:	f7ff be72 	b.w	b4570 <network_on>

000b488c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b488c:	2300      	movs	r3, #0
   b488e:	6840      	ldr	r0, [r0, #4]
   b4890:	461a      	mov	r2, r3
   b4892:	4619      	mov	r1, r3
   b4894:	f7ff be74 	b.w	b4580 <network_off>

000b4898 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4898:	6840      	ldr	r0, [r0, #4]
   b489a:	2100      	movs	r1, #0
   b489c:	f7ff be98 	b.w	b45d0 <network_is_on>

000b48a0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b48a0:	6840      	ldr	r0, [r0, #4]
   b48a2:	2100      	movs	r1, #0
   b48a4:	f7ff be9c 	b.w	b45e0 <network_is_off>

000b48a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b48a8:	6840      	ldr	r0, [r0, #4]
   b48aa:	2200      	movs	r2, #0
   b48ac:	f081 0101 	eor.w	r1, r1, #1
   b48b0:	f7ff be6e 	b.w	b4590 <network_listen>

000b48b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b48b4:	6840      	ldr	r0, [r0, #4]
   b48b6:	2200      	movs	r2, #0
   b48b8:	f7ff be7a 	b.w	b45b0 <network_set_listen_timeout>

000b48bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b48bc:	2200      	movs	r2, #0
   b48be:	6840      	ldr	r0, [r0, #4]
   b48c0:	4611      	mov	r1, r2
   b48c2:	f7ff be7d 	b.w	b45c0 <network_get_listen_timeout>

000b48c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b48c6:	2200      	movs	r2, #0
   b48c8:	6840      	ldr	r0, [r0, #4]
   b48ca:	4611      	mov	r1, r2
   b48cc:	f7ff be68 	b.w	b45a0 <network_listening>

000b48d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b48d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b48d4:	b095      	sub	sp, #84	; 0x54
   b48d6:	4614      	mov	r4, r2
   b48d8:	460d      	mov	r5, r1
   b48da:	4607      	mov	r7, r0
    IPAddress addr;
   b48dc:	f7ff ff76 	bl	b47cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b48e0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b48e2:	221c      	movs	r2, #28
   b48e4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b48e6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b48e8:	f000 fbca 	bl	b5080 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b48ec:	2340      	movs	r3, #64	; 0x40
   b48ee:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b48f0:	4620      	mov	r0, r4
   b48f2:	466b      	mov	r3, sp
   b48f4:	aa0c      	add	r2, sp, #48	; 0x30
   b48f6:	2100      	movs	r1, #0
   b48f8:	f7ff fd56 	bl	b43a8 <netdb_getaddrinfo>
    if (!r) {
   b48fc:	4604      	mov	r4, r0
   b48fe:	2800      	cmp	r0, #0
   b4900:	d14b      	bne.n	b499a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4902:	4602      	mov	r2, r0
   b4904:	2101      	movs	r1, #1
   b4906:	6868      	ldr	r0, [r5, #4]
   b4908:	f7ff fe2a 	bl	b4560 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b490c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b490e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4910:	4622      	mov	r2, r4
   b4912:	6868      	ldr	r0, [r5, #4]
   b4914:	f7ff fe24 	bl	b4560 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4918:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b491a:	4681      	mov	r9, r0
        bool ok = false;
   b491c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b491e:	2e00      	cmp	r6, #0
   b4920:	d03b      	beq.n	b499a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4922:	2900      	cmp	r1, #0
   b4924:	d139      	bne.n	b499a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4926:	6873      	ldr	r3, [r6, #4]
   b4928:	2b02      	cmp	r3, #2
   b492a:	d003      	beq.n	b4934 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b492c:	2b0a      	cmp	r3, #10
   b492e:	d011      	beq.n	b4954 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4930:	69f6      	ldr	r6, [r6, #28]
   b4932:	e7f4      	b.n	b491e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4934:	f1b8 0f00 	cmp.w	r8, #0
   b4938:	d0fa      	beq.n	b4930 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b493a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b493c:	a806      	add	r0, sp, #24
   b493e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4940:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4942:	f7ff ff71 	bl	b4828 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4948:	1d3c      	adds	r4, r7, #4
   b494a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b494c:	682b      	ldr	r3, [r5, #0]
   b494e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4950:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4952:	e7ed      	b.n	b4930 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4954:	f1b9 0f00 	cmp.w	r9, #0
   b4958:	d0ea      	beq.n	b4930 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b495a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b495c:	2210      	movs	r2, #16
   b495e:	a801      	add	r0, sp, #4
   b4960:	f000 fb8e 	bl	b5080 <memset>
                    a.v = 6;
   b4964:	2306      	movs	r3, #6
   b4966:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b496a:	ad01      	add	r5, sp, #4
   b496c:	f104 0308 	add.w	r3, r4, #8
   b4970:	3418      	adds	r4, #24
   b4972:	6818      	ldr	r0, [r3, #0]
   b4974:	6859      	ldr	r1, [r3, #4]
   b4976:	462a      	mov	r2, r5
   b4978:	c203      	stmia	r2!, {r0, r1}
   b497a:	3308      	adds	r3, #8
   b497c:	42a3      	cmp	r3, r4
   b497e:	4615      	mov	r5, r2
   b4980:	d1f7      	bne.n	b4972 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4982:	a901      	add	r1, sp, #4
   b4984:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4986:	ad07      	add	r5, sp, #28
   b4988:	f7ff ff2e 	bl	b47e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b498c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b498e:	1d3c      	adds	r4, r7, #4
   b4990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4992:	682b      	ldr	r3, [r5, #0]
   b4994:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4996:	4649      	mov	r1, r9
   b4998:	e7ca      	b.n	b4930 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b499a:	9800      	ldr	r0, [sp, #0]
   b499c:	f7ff fcfc 	bl	b4398 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b49a0:	4638      	mov	r0, r7
   b49a2:	b015      	add	sp, #84	; 0x54
   b49a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b49a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b49a8:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b49aa:	4a03      	ldr	r2, [pc, #12]	; (b49b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b49ac:	601a      	str	r2, [r3, #0]
   b49ae:	2200      	movs	r2, #0
   b49b0:	605a      	str	r2, [r3, #4]

} // spark
   b49b2:	4770      	bx	lr
   b49b4:	2003e6c8 	.word	0x2003e6c8
   b49b8:	000b5260 	.word	0x000b5260

000b49bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b49bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b49be:	4606      	mov	r6, r0
   b49c0:	460d      	mov	r5, r1
  size_t n = 0;
   b49c2:	188f      	adds	r7, r1, r2
   b49c4:	2400      	movs	r4, #0
  while (size--) {
   b49c6:	42bd      	cmp	r5, r7
   b49c8:	d00c      	beq.n	b49e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b49ca:	6833      	ldr	r3, [r6, #0]
   b49cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b49d0:	689b      	ldr	r3, [r3, #8]
   b49d2:	4630      	mov	r0, r6
   b49d4:	4798      	blx	r3
     if (chunk>=0)
   b49d6:	1e03      	subs	r3, r0, #0
   b49d8:	db01      	blt.n	b49de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b49da:	441c      	add	r4, r3
  while (size--) {
   b49dc:	e7f3      	b.n	b49c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b49de:	2c00      	cmp	r4, #0
   b49e0:	bf08      	it	eq
   b49e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b49e4:	4620      	mov	r0, r4
   b49e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49e8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b49e8:	b513      	push	{r0, r1, r4, lr}
   b49ea:	4604      	mov	r4, r0
    }
   b49ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b49ee:	b159      	cbz	r1, b4a08 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b49f0:	9101      	str	r1, [sp, #4]
   b49f2:	f000 fb7b 	bl	b50ec <strlen>
   b49f6:	6823      	ldr	r3, [r4, #0]
   b49f8:	9901      	ldr	r1, [sp, #4]
   b49fa:	68db      	ldr	r3, [r3, #12]
   b49fc:	4602      	mov	r2, r0
   b49fe:	4620      	mov	r0, r4
    }
   b4a00:	b002      	add	sp, #8
   b4a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4a06:	4718      	bx	r3
    }
   b4a08:	b002      	add	sp, #8
   b4a0a:	bd10      	pop	{r4, pc}

000b4a0c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4a0c:	6803      	ldr	r3, [r0, #0]
   b4a0e:	689b      	ldr	r3, [r3, #8]
   b4a10:	4718      	bx	r3

000b4a12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4a12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4a14:	210d      	movs	r1, #13
{
   b4a16:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4a18:	f7ff fff8 	bl	b4a0c <_ZN5Print5printEc>
  n += print('\n');
   b4a1c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4a1e:	4604      	mov	r4, r0
  n += print('\n');
   b4a20:	4628      	mov	r0, r5
   b4a22:	f7ff fff3 	bl	b4a0c <_ZN5Print5printEc>
  return n;
}
   b4a26:	4420      	add	r0, r4
   b4a28:	bd38      	pop	{r3, r4, r5, pc}

000b4a2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4a2a:	b530      	push	{r4, r5, lr}
   b4a2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4a2e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4a30:	2a01      	cmp	r2, #1
  *str = '\0';
   b4a32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4a36:	bf98      	it	ls
   b4a38:	220a      	movls	r2, #10
   b4a3a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4a3c:	460d      	mov	r5, r1
   b4a3e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4a42:	fb01 5312 	mls	r3, r1, r2, r5
   b4a46:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a4a:	2b09      	cmp	r3, #9
   b4a4c:	bf94      	ite	ls
   b4a4e:	3330      	addls	r3, #48	; 0x30
   b4a50:	3337      	addhi	r3, #55	; 0x37
   b4a52:	b2db      	uxtb	r3, r3
  } while(n);
   b4a54:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a56:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4a5a:	d9ef      	bls.n	b4a3c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4a5c:	4621      	mov	r1, r4
   b4a5e:	f7ff ffc3 	bl	b49e8 <_ZN5Print5writeEPKc>
}
   b4a62:	b00b      	add	sp, #44	; 0x2c
   b4a64:	bd30      	pop	{r4, r5, pc}
	...

000b4a68 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4a68:	4b01      	ldr	r3, [pc, #4]	; (b4a70 <_GLOBAL__sub_I_RGB+0x8>)
   b4a6a:	2200      	movs	r2, #0
   b4a6c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4a6e:	4770      	bx	lr
   b4a70:	2003e6d0 	.word	0x2003e6d0

000b4a74 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4a74:	b510      	push	{r4, lr}
   b4a76:	4604      	mov	r4, r0
   b4a78:	4608      	mov	r0, r1
{
    _spi = spi;
   b4a7a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4a7c:	f7ff fc9c 	bl	b43b8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4a80:	2300      	movs	r3, #0
   b4a82:	6063      	str	r3, [r4, #4]
}
   b4a84:	4620      	mov	r0, r4
   b4a86:	bd10      	pop	{r4, pc}

000b4a88 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4a88:	4b05      	ldr	r3, [pc, #20]	; (b4aa0 <_GLOBAL__sub_I_System+0x18>)
   b4a8a:	2202      	movs	r2, #2
   b4a8c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4a8e:	4b05      	ldr	r3, [pc, #20]	; (b4aa4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4a90:	4a05      	ldr	r2, [pc, #20]	; (b4aa8 <_GLOBAL__sub_I_System+0x20>)
   b4a92:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4a94:	2000      	movs	r0, #0
   b4a96:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4a9a:	f7ff bd15 	b.w	b44c8 <set_system_mode>
   b4a9e:	bf00      	nop
   b4aa0:	2003e6ec 	.word	0x2003e6ec
   b4aa4:	2003e6e0 	.word	0x2003e6e0
   b4aa8:	ffff0000 	.word	0xffff0000

000b4aac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4aac:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4aae:	681a      	ldr	r2, [r3, #0]
   b4ab0:	4b02      	ldr	r3, [pc, #8]	; (b4abc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4ab2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ab4:	4770      	bx	lr
   b4ab6:	bf00      	nop
   b4ab8:	2003e63c 	.word	0x2003e63c
   b4abc:	2003e6f0 	.word	0x2003e6f0

000b4ac0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4ac0:	4770      	bx	lr

000b4ac2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ac2:	7441      	strb	r1, [r0, #17]
}
   b4ac4:	4770      	bx	lr

000b4ac6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4ac6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4ac8:	7c00      	ldrb	r0, [r0, #16]
   b4aca:	f7ff fcb5 	bl	b4438 <hal_usart_available_data_for_write>
}
   b4ace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ad2:	bd08      	pop	{r3, pc}

000b4ad4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4ad4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4ad6:	7c00      	ldrb	r0, [r0, #16]
   b4ad8:	f7ff fc86 	bl	b43e8 <hal_usart_available>
}
   b4adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ae0:	bd08      	pop	{r3, pc}

000b4ae2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4ae2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4ae4:	7c00      	ldrb	r0, [r0, #16]
   b4ae6:	f7ff fc8f 	bl	b4408 <hal_usart_peek>
}
   b4aea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4aee:	bd08      	pop	{r3, pc}

000b4af0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4af0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4af2:	7c00      	ldrb	r0, [r0, #16]
   b4af4:	f7ff fc80 	bl	b43f8 <hal_usart_read>
}
   b4af8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4afc:	bd08      	pop	{r3, pc}

000b4afe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4afe:	7c00      	ldrb	r0, [r0, #16]
   b4b00:	f7ff bc8a 	b.w	b4418 <hal_usart_flush>

000b4b04 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4b06:	7c45      	ldrb	r5, [r0, #17]
{
   b4b08:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4b0a:	b12d      	cbz	r5, b4b18 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4b0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4b0e:	b003      	add	sp, #12
   b4b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4b14:	f7ff bc60 	b.w	b43d8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4b18:	7c00      	ldrb	r0, [r0, #16]
   b4b1a:	9101      	str	r1, [sp, #4]
   b4b1c:	f7ff fc8c 	bl	b4438 <hal_usart_available_data_for_write>
   b4b20:	2800      	cmp	r0, #0
   b4b22:	9901      	ldr	r1, [sp, #4]
   b4b24:	dcf2      	bgt.n	b4b0c <_ZN11USARTSerial5writeEh+0x8>
}
   b4b26:	4628      	mov	r0, r5
   b4b28:	b003      	add	sp, #12
   b4b2a:	bd30      	pop	{r4, r5, pc}

000b4b2c <_ZN11USARTSerialD0Ev>:
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	2114      	movs	r1, #20
   b4b30:	4604      	mov	r4, r0
   b4b32:	f7ff fab0 	bl	b4096 <_ZdlPvj>
   b4b36:	4620      	mov	r0, r4
   b4b38:	bd10      	pop	{r4, pc}
	...

000b4b3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4b3c:	b510      	push	{r4, lr}
   b4b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b42:	4604      	mov	r4, r0
   b4b44:	4608      	mov	r0, r1
   b4b46:	4611      	mov	r1, r2
   b4b48:	2200      	movs	r2, #0
   b4b4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4b4e:	4b04      	ldr	r3, [pc, #16]	; (b4b60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4b50:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4b52:	2301      	movs	r3, #1
  _serial = serial;
   b4b54:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4b56:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4b58:	f7ff fc76 	bl	b4448 <hal_usart_init_ex>
}
   b4b5c:	4620      	mov	r0, r4
   b4b5e:	bd10      	pop	{r4, pc}
   b4b60:	000b52b8 	.word	0x000b52b8

000b4b64 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4b64:	7441      	strb	r1, [r0, #17]
}
   b4b66:	4770      	bx	lr

000b4b68 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b68:	4770      	bx	lr

000b4b6a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4b6a:	4770      	bx	lr

000b4b6c <_ZN9USBSerial4readEv>:
{
   b4b6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4b6e:	2100      	movs	r1, #0
   b4b70:	7c00      	ldrb	r0, [r0, #16]
   b4b72:	f7ff fc91 	bl	b4498 <HAL_USB_USART_Receive_Data>
}
   b4b76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b7a:	bd08      	pop	{r3, pc}

000b4b7c <_ZN9USBSerial4peekEv>:
{
   b4b7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4b7e:	2101      	movs	r1, #1
   b4b80:	7c00      	ldrb	r0, [r0, #16]
   b4b82:	f7ff fc89 	bl	b4498 <HAL_USB_USART_Receive_Data>
}
   b4b86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b8a:	bd08      	pop	{r3, pc}

000b4b8c <_ZN9USBSerial17availableForWriteEv>:
{
   b4b8c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4b8e:	7c00      	ldrb	r0, [r0, #16]
   b4b90:	f7ff fc7a 	bl	b4488 <HAL_USB_USART_Available_Data_For_Write>
}
   b4b94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b98:	bd08      	pop	{r3, pc}

000b4b9a <_ZN9USBSerial9availableEv>:
{
   b4b9a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4b9c:	7c00      	ldrb	r0, [r0, #16]
   b4b9e:	f7ff fc6b 	bl	b4478 <HAL_USB_USART_Available_Data>
}
   b4ba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ba6:	bd08      	pop	{r3, pc}

000b4ba8 <_ZN9USBSerial5writeEh>:
{
   b4ba8:	b513      	push	{r0, r1, r4, lr}
   b4baa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4bac:	7c00      	ldrb	r0, [r0, #16]
{
   b4bae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4bb0:	f7ff fc6a 	bl	b4488 <HAL_USB_USART_Available_Data_For_Write>
   b4bb4:	2800      	cmp	r0, #0
   b4bb6:	9901      	ldr	r1, [sp, #4]
   b4bb8:	dc01      	bgt.n	b4bbe <_ZN9USBSerial5writeEh+0x16>
   b4bba:	7c60      	ldrb	r0, [r4, #17]
   b4bbc:	b120      	cbz	r0, b4bc8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4bbe:	7c20      	ldrb	r0, [r4, #16]
   b4bc0:	f7ff fc72 	bl	b44a8 <HAL_USB_USART_Send_Data>
   b4bc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4bc8:	b002      	add	sp, #8
   b4bca:	bd10      	pop	{r4, pc}

000b4bcc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4bcc:	7c00      	ldrb	r0, [r0, #16]
   b4bce:	f7ff bc73 	b.w	b44b8 <HAL_USB_USART_Flush_Data>

000b4bd2 <_ZN9USBSerialD0Ev>:
   b4bd2:	b510      	push	{r4, lr}
   b4bd4:	2114      	movs	r1, #20
   b4bd6:	4604      	mov	r4, r0
   b4bd8:	f7ff fa5d 	bl	b4096 <_ZdlPvj>
   b4bdc:	4620      	mov	r0, r4
   b4bde:	bd10      	pop	{r4, pc}

000b4be0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4be0:	b510      	push	{r4, lr}
   b4be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4be6:	4604      	mov	r4, r0
   b4be8:	4608      	mov	r0, r1
   b4bea:	2100      	movs	r1, #0
   b4bec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4bf0:	4b04      	ldr	r3, [pc, #16]	; (b4c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4bf2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4bf4:	2301      	movs	r3, #1
  _serial = serial;
   b4bf6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4bf8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4bfa:	4611      	mov	r1, r2
   b4bfc:	f7ff fc2c 	bl	b4458 <HAL_USB_USART_Init>
}
   b4c00:	4620      	mov	r0, r4
   b4c02:	bd10      	pop	{r4, pc}
   b4c04:	000b52e8 	.word	0x000b52e8

000b4c08 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4c08:	7c00      	ldrb	r0, [r0, #16]
   b4c0a:	2200      	movs	r2, #0
   b4c0c:	f7ff bc2c 	b.w	b4468 <HAL_USB_USART_Begin>

000b4c10 <_Z19acquireSerialBufferv>:
{
   b4c10:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4c12:	2214      	movs	r2, #20
{
   b4c14:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4c16:	2100      	movs	r1, #0
   b4c18:	f000 fa32 	bl	b5080 <memset>
}
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	bd10      	pop	{r4, pc}

000b4c20 <_Z16_fetch_usbserialv>:
{
   b4c20:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c22:	4c0f      	ldr	r4, [pc, #60]	; (b4c60 <_Z16_fetch_usbserialv+0x40>)
{
   b4c24:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4c26:	a803      	add	r0, sp, #12
   b4c28:	f7ff fff2 	bl	b4c10 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c2c:	7821      	ldrb	r1, [r4, #0]
   b4c2e:	f3bf 8f5b 	dmb	ish
   b4c32:	f011 0101 	ands.w	r1, r1, #1
   b4c36:	d10f      	bne.n	b4c58 <_Z16_fetch_usbserialv+0x38>
   b4c38:	4620      	mov	r0, r4
   b4c3a:	9101      	str	r1, [sp, #4]
   b4c3c:	f7ff fa2d 	bl	b409a <__cxa_guard_acquire>
   b4c40:	9901      	ldr	r1, [sp, #4]
   b4c42:	b148      	cbz	r0, b4c58 <_Z16_fetch_usbserialv+0x38>
   b4c44:	aa03      	add	r2, sp, #12
   b4c46:	4807      	ldr	r0, [pc, #28]	; (b4c64 <_Z16_fetch_usbserialv+0x44>)
   b4c48:	f7ff ffca 	bl	b4be0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4c4c:	4620      	mov	r0, r4
   b4c4e:	f7ff fa29 	bl	b40a4 <__cxa_guard_release>
   b4c52:	4805      	ldr	r0, [pc, #20]	; (b4c68 <_Z16_fetch_usbserialv+0x48>)
   b4c54:	f000 fa00 	bl	b5058 <atexit>
	return _usbserial;
}
   b4c58:	4802      	ldr	r0, [pc, #8]	; (b4c64 <_Z16_fetch_usbserialv+0x44>)
   b4c5a:	b008      	add	sp, #32
   b4c5c:	bd10      	pop	{r4, pc}
   b4c5e:	bf00      	nop
   b4c60:	2003e6f4 	.word	0x2003e6f4
   b4c64:	2003e6f8 	.word	0x2003e6f8
   b4c68:	000b4b69 	.word	0x000b4b69

000b4c6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4c6c:	2200      	movs	r2, #0
   b4c6e:	6840      	ldr	r0, [r0, #4]
   b4c70:	4611      	mov	r1, r2
   b4c72:	f7ff bc75 	b.w	b4560 <network_ready>

000b4c76 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c76:	2200      	movs	r2, #0
   b4c78:	6840      	ldr	r0, [r0, #4]
   b4c7a:	4611      	mov	r1, r2
   b4c7c:	f7ff bc90 	b.w	b45a0 <network_listening>

000b4c80 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c80:	2200      	movs	r2, #0
   b4c82:	6840      	ldr	r0, [r0, #4]
   b4c84:	4611      	mov	r1, r2
   b4c86:	f7ff bc9b 	b.w	b45c0 <network_get_listen_timeout>

000b4c8a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c8a:	6840      	ldr	r0, [r0, #4]
   b4c8c:	2200      	movs	r2, #0
   b4c8e:	f7ff bc8f 	b.w	b45b0 <network_set_listen_timeout>

000b4c92 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c92:	6840      	ldr	r0, [r0, #4]
   b4c94:	2200      	movs	r2, #0
   b4c96:	f081 0101 	eor.w	r1, r1, #1
   b4c9a:	f7ff bc79 	b.w	b4590 <network_listen>

000b4c9e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c9e:	2300      	movs	r3, #0
   b4ca0:	6840      	ldr	r0, [r0, #4]
   b4ca2:	461a      	mov	r2, r3
   b4ca4:	4619      	mov	r1, r3
   b4ca6:	f7ff bc6b 	b.w	b4580 <network_off>

000b4caa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4caa:	2300      	movs	r3, #0
   b4cac:	6840      	ldr	r0, [r0, #4]
   b4cae:	461a      	mov	r2, r3
   b4cb0:	4619      	mov	r1, r3
   b4cb2:	f7ff bc5d 	b.w	b4570 <network_on>

000b4cb6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4cb6:	2200      	movs	r2, #0
   b4cb8:	6840      	ldr	r0, [r0, #4]
   b4cba:	4611      	mov	r1, r2
   b4cbc:	f7ff bc40 	b.w	b4540 <network_connecting>

000b4cc0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4cc0:	6840      	ldr	r0, [r0, #4]
   b4cc2:	2200      	movs	r2, #0
   b4cc4:	2102      	movs	r1, #2
   b4cc6:	f7ff bc43 	b.w	b4550 <network_disconnect>

000b4cca <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4cca:	2300      	movs	r3, #0
   b4ccc:	6840      	ldr	r0, [r0, #4]
   b4cce:	461a      	mov	r2, r3
   b4cd0:	f7ff bc2e 	b.w	b4530 <network_connect>

000b4cd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4cd4:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4cd6:	2204      	movs	r2, #4
   b4cd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4cda:	4a02      	ldr	r2, [pc, #8]	; (b4ce4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4cdc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4cde:	4770      	bx	lr
   b4ce0:	2003e70c 	.word	0x2003e70c
   b4ce4:	000b5318 	.word	0x000b5318

000b4ce8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4ce8:	4b01      	ldr	r3, [pc, #4]	; (b4cf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4cea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4cec:	4770      	bx	lr
   b4cee:	bf00      	nop
   b4cf0:	2003e640 	.word	0x2003e640

000b4cf4 <serialEventRun>:
{
   b4cf4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4cf6:	4b0b      	ldr	r3, [pc, #44]	; (b4d24 <serialEventRun+0x30>)
   b4cf8:	b143      	cbz	r3, b4d0c <serialEventRun+0x18>
   b4cfa:	f7ff ff91 	bl	b4c20 <_Z16_fetch_usbserialv>
   b4cfe:	6803      	ldr	r3, [r0, #0]
   b4d00:	691b      	ldr	r3, [r3, #16]
   b4d02:	4798      	blx	r3
   b4d04:	2800      	cmp	r0, #0
   b4d06:	dd01      	ble.n	b4d0c <serialEventRun+0x18>
        serialEvent();
   b4d08:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4d0c:	4b06      	ldr	r3, [pc, #24]	; (b4d28 <serialEventRun+0x34>)
   b4d0e:	b143      	cbz	r3, b4d22 <serialEventRun+0x2e>
   b4d10:	f000 f97c 	bl	b500c <_Z22__fetch_global_Serial1v>
   b4d14:	6803      	ldr	r3, [r0, #0]
   b4d16:	691b      	ldr	r3, [r3, #16]
   b4d18:	4798      	blx	r3
   b4d1a:	2800      	cmp	r0, #0
   b4d1c:	dd01      	ble.n	b4d22 <serialEventRun+0x2e>
        serialEvent1();
   b4d1e:	f3af 8000 	nop.w
}
   b4d22:	bd08      	pop	{r3, pc}
	...

000b4d2c <_post_loop>:
{
   b4d2c:	b508      	push	{r3, lr}
	serialEventRun();
   b4d2e:	f7ff ffe1 	bl	b4cf4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d32:	f7ff fab1 	bl	b4298 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4d36:	4b01      	ldr	r3, [pc, #4]	; (b4d3c <_post_loop+0x10>)
   b4d38:	6018      	str	r0, [r3, #0]
}
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	2003e728 	.word	0x2003e728

000b4d40 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d40:	4805      	ldr	r0, [pc, #20]	; (b4d58 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4d42:	4a06      	ldr	r2, [pc, #24]	; (b4d5c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4d44:	4906      	ldr	r1, [pc, #24]	; (b4d60 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4d46:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d48:	1a12      	subs	r2, r2, r0
   b4d4a:	f000 f98b 	bl	b5064 <memcpy>
    __backup_sram_signature = signature;
   b4d4e:	4b05      	ldr	r3, [pc, #20]	; (b4d64 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4d50:	4a05      	ldr	r2, [pc, #20]	; (b4d68 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4d52:	601a      	str	r2, [r3, #0]
}
   b4d54:	bd08      	pop	{r3, pc}
   b4d56:	bf00      	nop
   b4d58:	2003f400 	.word	0x2003f400
   b4d5c:	2003f404 	.word	0x2003f404
   b4d60:	000b5414 	.word	0x000b5414
   b4d64:	2003f400 	.word	0x2003f400
   b4d68:	9a271c1e 	.word	0x9a271c1e

000b4d6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4d6c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d6e:	2300      	movs	r3, #0
   b4d70:	9300      	str	r3, [sp, #0]
   b4d72:	461a      	mov	r2, r3
   b4d74:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d78:	f7ff fbc8 	bl	b450c <system_ctrl_set_result>
}
   b4d7c:	b003      	add	sp, #12
   b4d7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4d84 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4d84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4d86:	8843      	ldrh	r3, [r0, #2]
   b4d88:	2b0a      	cmp	r3, #10
   b4d8a:	d008      	beq.n	b4d9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4d8c:	2b50      	cmp	r3, #80	; 0x50
   b4d8e:	d10b      	bne.n	b4da8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4d90:	4b09      	ldr	r3, [pc, #36]	; (b4db8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4d92:	681b      	ldr	r3, [r3, #0]
   b4d94:	b14b      	cbz	r3, b4daa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4d96:	b003      	add	sp, #12
   b4d98:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4d9c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4d9e:	f7ff ffe5 	bl	b4d6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4da2:	b003      	add	sp, #12
   b4da4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4da8:	2300      	movs	r3, #0
   b4daa:	9300      	str	r3, [sp, #0]
   b4dac:	461a      	mov	r2, r3
   b4dae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4db2:	f7ff fbab 	bl	b450c <system_ctrl_set_result>
}
   b4db6:	e7f4      	b.n	b4da2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4db8:	2003e718 	.word	0x2003e718

000b4dbc <module_user_init_hook>:
{
   b4dbc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4dbe:	4812      	ldr	r0, [pc, #72]	; (b4e08 <module_user_init_hook+0x4c>)
   b4dc0:	2100      	movs	r1, #0
   b4dc2:	f7ff fc2d 	bl	b4620 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4dc6:	4b11      	ldr	r3, [pc, #68]	; (b4e0c <module_user_init_hook+0x50>)
   b4dc8:	681a      	ldr	r2, [r3, #0]
   b4dca:	4b11      	ldr	r3, [pc, #68]	; (b4e10 <module_user_init_hook+0x54>)
   b4dcc:	429a      	cmp	r2, r3
   b4dce:	4b11      	ldr	r3, [pc, #68]	; (b4e14 <module_user_init_hook+0x58>)
   b4dd0:	bf0c      	ite	eq
   b4dd2:	2201      	moveq	r2, #1
   b4dd4:	2200      	movne	r2, #0
   b4dd6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4dd8:	d001      	beq.n	b4dde <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4dda:	f7ff ffb1 	bl	b4d40 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4dde:	f7ff fa53 	bl	b4288 <HAL_RNG_GetRandomNumber>
   b4de2:	4604      	mov	r4, r0
    srand(seed);
   b4de4:	f000 f954 	bl	b5090 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4de8:	4b0b      	ldr	r3, [pc, #44]	; (b4e18 <module_user_init_hook+0x5c>)
   b4dea:	b113      	cbz	r3, b4df2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4dec:	4620      	mov	r0, r4
   b4dee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4df2:	2100      	movs	r1, #0
   b4df4:	4808      	ldr	r0, [pc, #32]	; (b4e18 <module_user_init_hook+0x5c>)
   b4df6:	f7ff fb93 	bl	b4520 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4dfe:	4807      	ldr	r0, [pc, #28]	; (b4e1c <module_user_init_hook+0x60>)
   b4e00:	2100      	movs	r1, #0
   b4e02:	f7ff bb79 	b.w	b44f8 <system_ctrl_set_app_request_handler>
   b4e06:	bf00      	nop
   b4e08:	000b4ce9 	.word	0x000b4ce9
   b4e0c:	2003f400 	.word	0x2003f400
   b4e10:	9a271c1e 	.word	0x9a271c1e
   b4e14:	2003e714 	.word	0x2003e714
   b4e18:	00000000 	.word	0x00000000
   b4e1c:	000b4d85 	.word	0x000b4d85

000b4e20 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4e20:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4e22:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4e24:	d902      	bls.n	b4e2c <pinAvailable+0xc>
    return false;
   b4e26:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4e28:	b002      	add	sp, #8
   b4e2a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4e2c:	f1a0 030b 	sub.w	r3, r0, #11
   b4e30:	2b02      	cmp	r3, #2
   b4e32:	d81a      	bhi.n	b4e6a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4e34:	4c17      	ldr	r4, [pc, #92]	; (b4e94 <pinAvailable+0x74>)
   b4e36:	7821      	ldrb	r1, [r4, #0]
   b4e38:	f3bf 8f5b 	dmb	ish
   b4e3c:	f011 0101 	ands.w	r1, r1, #1
   b4e40:	d10b      	bne.n	b4e5a <pinAvailable+0x3a>
   b4e42:	4620      	mov	r0, r4
   b4e44:	9101      	str	r1, [sp, #4]
   b4e46:	f7ff f928 	bl	b409a <__cxa_guard_acquire>
   b4e4a:	9901      	ldr	r1, [sp, #4]
   b4e4c:	b128      	cbz	r0, b4e5a <pinAvailable+0x3a>
   b4e4e:	4812      	ldr	r0, [pc, #72]	; (b4e98 <pinAvailable+0x78>)
   b4e50:	f7ff fe10 	bl	b4a74 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4e54:	4620      	mov	r0, r4
   b4e56:	f7ff f925 	bl	b40a4 <__cxa_guard_release>
   b4e5a:	4b0f      	ldr	r3, [pc, #60]	; (b4e98 <pinAvailable+0x78>)
   b4e5c:	7818      	ldrb	r0, [r3, #0]
   b4e5e:	f7ff fab3 	bl	b43c8 <hal_spi_is_enabled>
   b4e62:	2800      	cmp	r0, #0
   b4e64:	d1df      	bne.n	b4e26 <pinAvailable+0x6>
  return true; // 'pin' is available
   b4e66:	2001      	movs	r0, #1
   b4e68:	e7de      	b.n	b4e28 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4e6a:	2801      	cmp	r0, #1
   b4e6c:	d809      	bhi.n	b4e82 <pinAvailable+0x62>
   b4e6e:	f000 f88d 	bl	b4f8c <_Z19__fetch_global_Wirev>
   b4e72:	2100      	movs	r1, #0
   b4e74:	7c00      	ldrb	r0, [r0, #16]
   b4e76:	f7ff fa77 	bl	b4368 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4e7a:	f080 0001 	eor.w	r0, r0, #1
   b4e7e:	b2c0      	uxtb	r0, r0
   b4e80:	e7d2      	b.n	b4e28 <pinAvailable+0x8>
   b4e82:	3809      	subs	r0, #9
   b4e84:	2801      	cmp	r0, #1
   b4e86:	d8ee      	bhi.n	b4e66 <pinAvailable+0x46>
   b4e88:	f000 f8c0 	bl	b500c <_Z22__fetch_global_Serial1v>
   b4e8c:	7c00      	ldrb	r0, [r0, #16]
   b4e8e:	f7ff facb 	bl	b4428 <hal_usart_is_enabled>
   b4e92:	e7f2      	b.n	b4e7a <pinAvailable+0x5a>
   b4e94:	2003e71c 	.word	0x2003e71c
   b4e98:	2003e720 	.word	0x2003e720

000b4e9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4e9c:	2823      	cmp	r0, #35	; 0x23
{
   b4e9e:	b538      	push	{r3, r4, r5, lr}
   b4ea0:	4604      	mov	r4, r0
   b4ea2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4ea4:	d80a      	bhi.n	b4ebc <pinMode+0x20>
   b4ea6:	29ff      	cmp	r1, #255	; 0xff
   b4ea8:	d008      	beq.n	b4ebc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b4eaa:	f7ff ffb9 	bl	b4e20 <pinAvailable>
   b4eae:	b128      	cbz	r0, b4ebc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b4eb0:	4629      	mov	r1, r5
   b4eb2:	4620      	mov	r0, r4
}
   b4eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b4eb8:	f7ff b9fe 	b.w	b42b8 <HAL_Pin_Mode>
}
   b4ebc:	bd38      	pop	{r3, r4, r5, pc}

000b4ebe <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b4ebe:	b510      	push	{r4, lr}
   b4ec0:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b4ec2:	f7ff fa01 	bl	b42c8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b4ec6:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b4ec8:	b2db      	uxtb	r3, r3
   b4eca:	2b01      	cmp	r3, #1
   b4ecc:	d908      	bls.n	b4ee0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b4ece:	4620      	mov	r0, r4
   b4ed0:	f7ff ffa6 	bl	b4e20 <pinAvailable>
   b4ed4:	b120      	cbz	r0, b4ee0 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b4ed6:	4620      	mov	r0, r4
}
   b4ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b4edc:	f7ff b9fc 	b.w	b42d8 <HAL_GPIO_Read>
}
   b4ee0:	2000      	movs	r0, #0
   b4ee2:	bd10      	pop	{r4, pc}

000b4ee4 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b4ee4:	280d      	cmp	r0, #13
{
   b4ee6:	b510      	push	{r4, lr}
   b4ee8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b4eea:	bf9c      	itt	ls
   b4eec:	340e      	addls	r4, #14
   b4eee:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b4ef0:	4620      	mov	r0, r4
   b4ef2:	f7ff ff95 	bl	b4e20 <pinAvailable>
   b4ef6:	b150      	cbz	r0, b4f0e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b4ef8:	2103      	movs	r1, #3
   b4efa:	4620      	mov	r0, r4
   b4efc:	f7ff f9d4 	bl	b42a8 <HAL_Validate_Pin_Function>
   b4f00:	2803      	cmp	r0, #3
   b4f02:	d104      	bne.n	b4f0e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b4f04:	4620      	mov	r0, r4
}
   b4f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b4f0a:	f7ff b9f5 	b.w	b42f8 <hal_adc_read>
}
   b4f0e:	2000      	movs	r0, #0
   b4f10:	bd10      	pop	{r4, pc}

000b4f12 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b4f12:	b538      	push	{r3, r4, r5, lr}
   b4f14:	4604      	mov	r4, r0
   b4f16:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b4f18:	f7ff ff82 	bl	b4e20 <pinAvailable>
   b4f1c:	b1f0      	cbz	r0, b4f5c <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b4f1e:	2104      	movs	r1, #4
   b4f20:	4620      	mov	r0, r4
   b4f22:	f7ff f9c1 	bl	b42a8 <HAL_Validate_Pin_Function>
   b4f26:	2804      	cmp	r0, #4
   b4f28:	d105      	bne.n	b4f36 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b4f2a:	b2a9      	uxth	r1, r5
   b4f2c:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b4f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b4f32:	f7ff b9d9 	b.w	b42e8 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b4f36:	2102      	movs	r1, #2
   b4f38:	4620      	mov	r0, r4
   b4f3a:	f7ff f9b5 	bl	b42a8 <HAL_Validate_Pin_Function>
   b4f3e:	2802      	cmp	r0, #2
   b4f40:	d10c      	bne.n	b4f5c <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b4f42:	4620      	mov	r0, r4
   b4f44:	f7ff f9c0 	bl	b42c8 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b4f48:	2801      	cmp	r0, #1
   b4f4a:	d001      	beq.n	b4f50 <_Z11analogWritetm+0x3e>
   b4f4c:	2804      	cmp	r0, #4
   b4f4e:	d105      	bne.n	b4f5c <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b4f50:	4629      	mov	r1, r5
   b4f52:	4620      	mov	r0, r4
}
   b4f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b4f58:	f7ff b9d6 	b.w	b4308 <hal_pwm_write_ext>
}
   b4f5c:	bd38      	pop	{r3, r4, r5, pc}

000b4f5e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f5e:	4770      	bx	lr

000b4f60 <_Z17acquireWireBufferv>:
{
   b4f60:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4f62:	2520      	movs	r5, #32
   b4f64:	2314      	movs	r3, #20
{
   b4f66:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4f68:	6003      	str	r3, [r0, #0]
   b4f6a:	6085      	str	r5, [r0, #8]
   b4f6c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f6e:	4906      	ldr	r1, [pc, #24]	; (b4f88 <_Z17acquireWireBufferv+0x28>)
   b4f70:	4628      	mov	r0, r5
   b4f72:	f000 f86f 	bl	b5054 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f76:	4904      	ldr	r1, [pc, #16]	; (b4f88 <_Z17acquireWireBufferv+0x28>)
	};
   b4f78:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f7a:	4628      	mov	r0, r5
   b4f7c:	f000 f86a 	bl	b5054 <_ZnajRKSt9nothrow_t>
	};
   b4f80:	60e0      	str	r0, [r4, #12]
}
   b4f82:	4620      	mov	r0, r4
   b4f84:	bd38      	pop	{r3, r4, r5, pc}
   b4f86:	bf00      	nop
   b4f88:	000b534c 	.word	0x000b534c

000b4f8c <_Z19__fetch_global_Wirev>:
{
   b4f8c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f8e:	4d0e      	ldr	r5, [pc, #56]	; (b4fc8 <_Z19__fetch_global_Wirev+0x3c>)
   b4f90:	7829      	ldrb	r1, [r5, #0]
   b4f92:	f3bf 8f5b 	dmb	ish
   b4f96:	f011 0401 	ands.w	r4, r1, #1
{
   b4f9a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f9c:	d111      	bne.n	b4fc2 <_Z19__fetch_global_Wirev+0x36>
   b4f9e:	4628      	mov	r0, r5
   b4fa0:	f7ff f87b 	bl	b409a <__cxa_guard_acquire>
   b4fa4:	b168      	cbz	r0, b4fc2 <_Z19__fetch_global_Wirev+0x36>
   b4fa6:	a801      	add	r0, sp, #4
   b4fa8:	f7ff ffda 	bl	b4f60 <_Z17acquireWireBufferv>
   b4fac:	aa01      	add	r2, sp, #4
   b4fae:	4621      	mov	r1, r4
   b4fb0:	4806      	ldr	r0, [pc, #24]	; (b4fcc <_Z19__fetch_global_Wirev+0x40>)
   b4fb2:	f7ff fbbf 	bl	b4734 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4fb6:	4628      	mov	r0, r5
   b4fb8:	f7ff f874 	bl	b40a4 <__cxa_guard_release>
   b4fbc:	4804      	ldr	r0, [pc, #16]	; (b4fd0 <_Z19__fetch_global_Wirev+0x44>)
   b4fbe:	f000 f84b 	bl	b5058 <atexit>
	return wire;
}
   b4fc2:	4802      	ldr	r0, [pc, #8]	; (b4fcc <_Z19__fetch_global_Wirev+0x40>)
   b4fc4:	b007      	add	sp, #28
   b4fc6:	bd30      	pop	{r4, r5, pc}
   b4fc8:	2003e72c 	.word	0x2003e72c
   b4fcc:	2003e730 	.word	0x2003e730
   b4fd0:	000b4f5f 	.word	0x000b4f5f

000b4fd4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4fd4:	4770      	bx	lr
	...

000b4fd8 <_Z20acquireSerial1Bufferv>:
{
   b4fd8:	b538      	push	{r3, r4, r5, lr}
   b4fda:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4fdc:	2514      	movs	r5, #20
   b4fde:	462a      	mov	r2, r5
   b4fe0:	2100      	movs	r1, #0
   b4fe2:	f000 f84d 	bl	b5080 <memset>
   b4fe6:	8025      	strh	r5, [r4, #0]
   b4fe8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4fea:	4907      	ldr	r1, [pc, #28]	; (b5008 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4fec:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4fee:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4ff0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ff2:	f000 f82f 	bl	b5054 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ff6:	4904      	ldr	r1, [pc, #16]	; (b5008 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4ff8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4ffa:	4628      	mov	r0, r5
   b4ffc:	f000 f82a 	bl	b5054 <_ZnajRKSt9nothrow_t>
    };
   b5000:	60e0      	str	r0, [r4, #12]
}
   b5002:	4620      	mov	r0, r4
   b5004:	bd38      	pop	{r3, r4, r5, pc}
   b5006:	bf00      	nop
   b5008:	000b534c 	.word	0x000b534c

000b500c <_Z22__fetch_global_Serial1v>:
{
   b500c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b500e:	4d0e      	ldr	r5, [pc, #56]	; (b5048 <_Z22__fetch_global_Serial1v+0x3c>)
   b5010:	7829      	ldrb	r1, [r5, #0]
   b5012:	f3bf 8f5b 	dmb	ish
   b5016:	f011 0401 	ands.w	r4, r1, #1
{
   b501a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b501c:	d111      	bne.n	b5042 <_Z22__fetch_global_Serial1v+0x36>
   b501e:	4628      	mov	r0, r5
   b5020:	f7ff f83b 	bl	b409a <__cxa_guard_acquire>
   b5024:	b168      	cbz	r0, b5042 <_Z22__fetch_global_Serial1v+0x36>
   b5026:	a801      	add	r0, sp, #4
   b5028:	f7ff ffd6 	bl	b4fd8 <_Z20acquireSerial1Bufferv>
   b502c:	aa01      	add	r2, sp, #4
   b502e:	4621      	mov	r1, r4
   b5030:	4806      	ldr	r0, [pc, #24]	; (b504c <_Z22__fetch_global_Serial1v+0x40>)
   b5032:	f7ff fd83 	bl	b4b3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5036:	4628      	mov	r0, r5
   b5038:	f7ff f834 	bl	b40a4 <__cxa_guard_release>
   b503c:	4804      	ldr	r0, [pc, #16]	; (b5050 <_Z22__fetch_global_Serial1v+0x44>)
   b503e:	f000 f80b 	bl	b5058 <atexit>
    return serial1;
}
   b5042:	4802      	ldr	r0, [pc, #8]	; (b504c <_Z22__fetch_global_Serial1v+0x40>)
   b5044:	b007      	add	sp, #28
   b5046:	bd30      	pop	{r4, r5, pc}
   b5048:	2003e744 	.word	0x2003e744
   b504c:	2003e748 	.word	0x2003e748
   b5050:	000b4fd5 	.word	0x000b4fd5

000b5054 <_ZnajRKSt9nothrow_t>:
   b5054:	f7ff b81d 	b.w	b4092 <_Znaj>

000b5058 <atexit>:
   b5058:	2300      	movs	r3, #0
   b505a:	4601      	mov	r1, r0
   b505c:	461a      	mov	r2, r3
   b505e:	4618      	mov	r0, r3
   b5060:	f000 b84c 	b.w	b50fc <__register_exitproc>

000b5064 <memcpy>:
   b5064:	440a      	add	r2, r1
   b5066:	4291      	cmp	r1, r2
   b5068:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b506c:	d100      	bne.n	b5070 <memcpy+0xc>
   b506e:	4770      	bx	lr
   b5070:	b510      	push	{r4, lr}
   b5072:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5076:	f803 4f01 	strb.w	r4, [r3, #1]!
   b507a:	4291      	cmp	r1, r2
   b507c:	d1f9      	bne.n	b5072 <memcpy+0xe>
   b507e:	bd10      	pop	{r4, pc}

000b5080 <memset>:
   b5080:	4402      	add	r2, r0
   b5082:	4603      	mov	r3, r0
   b5084:	4293      	cmp	r3, r2
   b5086:	d100      	bne.n	b508a <memset+0xa>
   b5088:	4770      	bx	lr
   b508a:	f803 1b01 	strb.w	r1, [r3], #1
   b508e:	e7f9      	b.n	b5084 <memset+0x4>

000b5090 <srand>:
   b5090:	b538      	push	{r3, r4, r5, lr}
   b5092:	4b10      	ldr	r3, [pc, #64]	; (b50d4 <srand+0x44>)
   b5094:	681d      	ldr	r5, [r3, #0]
   b5096:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5098:	4604      	mov	r4, r0
   b509a:	b9b3      	cbnz	r3, b50ca <srand+0x3a>
   b509c:	2018      	movs	r0, #24
   b509e:	f7ff faa7 	bl	b45f0 <malloc>
   b50a2:	4602      	mov	r2, r0
   b50a4:	63a8      	str	r0, [r5, #56]	; 0x38
   b50a6:	b920      	cbnz	r0, b50b2 <srand+0x22>
   b50a8:	4b0b      	ldr	r3, [pc, #44]	; (b50d8 <srand+0x48>)
   b50aa:	480c      	ldr	r0, [pc, #48]	; (b50dc <srand+0x4c>)
   b50ac:	2142      	movs	r1, #66	; 0x42
   b50ae:	f7ff faaf 	bl	b4610 <__assert_func>
   b50b2:	490b      	ldr	r1, [pc, #44]	; (b50e0 <srand+0x50>)
   b50b4:	4b0b      	ldr	r3, [pc, #44]	; (b50e4 <srand+0x54>)
   b50b6:	e9c0 1300 	strd	r1, r3, [r0]
   b50ba:	4b0b      	ldr	r3, [pc, #44]	; (b50e8 <srand+0x58>)
   b50bc:	6083      	str	r3, [r0, #8]
   b50be:	230b      	movs	r3, #11
   b50c0:	8183      	strh	r3, [r0, #12]
   b50c2:	2100      	movs	r1, #0
   b50c4:	2001      	movs	r0, #1
   b50c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b50ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b50cc:	2200      	movs	r2, #0
   b50ce:	611c      	str	r4, [r3, #16]
   b50d0:	615a      	str	r2, [r3, #20]
   b50d2:	bd38      	pop	{r3, r4, r5, pc}
   b50d4:	2003e640 	.word	0x2003e640
   b50d8:	000b534d 	.word	0x000b534d
   b50dc:	000b5364 	.word	0x000b5364
   b50e0:	abcd330e 	.word	0xabcd330e
   b50e4:	e66d1234 	.word	0xe66d1234
   b50e8:	0005deec 	.word	0x0005deec

000b50ec <strlen>:
   b50ec:	4603      	mov	r3, r0
   b50ee:	f813 2b01 	ldrb.w	r2, [r3], #1
   b50f2:	2a00      	cmp	r2, #0
   b50f4:	d1fb      	bne.n	b50ee <strlen+0x2>
   b50f6:	1a18      	subs	r0, r3, r0
   b50f8:	3801      	subs	r0, #1
   b50fa:	4770      	bx	lr

000b50fc <__register_exitproc>:
   b50fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5100:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b51bc <__register_exitproc+0xc0>
   b5104:	4606      	mov	r6, r0
   b5106:	f8d8 0000 	ldr.w	r0, [r8]
   b510a:	461f      	mov	r7, r3
   b510c:	460d      	mov	r5, r1
   b510e:	4691      	mov	r9, r2
   b5110:	f000 f856 	bl	b51c0 <__retarget_lock_acquire_recursive>
   b5114:	4b25      	ldr	r3, [pc, #148]	; (b51ac <__register_exitproc+0xb0>)
   b5116:	681c      	ldr	r4, [r3, #0]
   b5118:	b934      	cbnz	r4, b5128 <__register_exitproc+0x2c>
   b511a:	4c25      	ldr	r4, [pc, #148]	; (b51b0 <__register_exitproc+0xb4>)
   b511c:	601c      	str	r4, [r3, #0]
   b511e:	4b25      	ldr	r3, [pc, #148]	; (b51b4 <__register_exitproc+0xb8>)
   b5120:	b113      	cbz	r3, b5128 <__register_exitproc+0x2c>
   b5122:	681b      	ldr	r3, [r3, #0]
   b5124:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5128:	6863      	ldr	r3, [r4, #4]
   b512a:	2b1f      	cmp	r3, #31
   b512c:	dd07      	ble.n	b513e <__register_exitproc+0x42>
   b512e:	f8d8 0000 	ldr.w	r0, [r8]
   b5132:	f000 f847 	bl	b51c4 <__retarget_lock_release_recursive>
   b5136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b513a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b513e:	b34e      	cbz	r6, b5194 <__register_exitproc+0x98>
   b5140:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5144:	b988      	cbnz	r0, b516a <__register_exitproc+0x6e>
   b5146:	4b1c      	ldr	r3, [pc, #112]	; (b51b8 <__register_exitproc+0xbc>)
   b5148:	b923      	cbnz	r3, b5154 <__register_exitproc+0x58>
   b514a:	f8d8 0000 	ldr.w	r0, [r8]
   b514e:	f000 f838 	bl	b51c2 <__retarget_lock_release>
   b5152:	e7f0      	b.n	b5136 <__register_exitproc+0x3a>
   b5154:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5158:	f7ff fa4a 	bl	b45f0 <malloc>
   b515c:	2800      	cmp	r0, #0
   b515e:	d0f4      	beq.n	b514a <__register_exitproc+0x4e>
   b5160:	2300      	movs	r3, #0
   b5162:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5166:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b516a:	6863      	ldr	r3, [r4, #4]
   b516c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5170:	2201      	movs	r2, #1
   b5172:	409a      	lsls	r2, r3
   b5174:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5178:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b517c:	4313      	orrs	r3, r2
   b517e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5182:	2e02      	cmp	r6, #2
   b5184:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5188:	bf02      	ittt	eq
   b518a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b518e:	4313      	orreq	r3, r2
   b5190:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5194:	6863      	ldr	r3, [r4, #4]
   b5196:	f8d8 0000 	ldr.w	r0, [r8]
   b519a:	1c5a      	adds	r2, r3, #1
   b519c:	3302      	adds	r3, #2
   b519e:	6062      	str	r2, [r4, #4]
   b51a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b51a4:	f000 f80e 	bl	b51c4 <__retarget_lock_release_recursive>
   b51a8:	2000      	movs	r0, #0
   b51aa:	e7c6      	b.n	b513a <__register_exitproc+0x3e>
   b51ac:	2003e7e8 	.word	0x2003e7e8
   b51b0:	2003e75c 	.word	0x2003e75c
   b51b4:	00000000 	.word	0x00000000
   b51b8:	000b45f1 	.word	0x000b45f1
   b51bc:	2003e6a4 	.word	0x2003e6a4

000b51c0 <__retarget_lock_acquire_recursive>:
   b51c0:	4770      	bx	lr

000b51c2 <__retarget_lock_release>:
   b51c2:	4770      	bx	lr

000b51c4 <__retarget_lock_release_recursive>:
   b51c4:	4770      	bx	lr

000b51c6 <link_code_end>:
	...

000b51c8 <dynalib_user>:
   b51c8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b51d8:	0000 0000                                   ....

000b51dc <_ZTVN5spark13EthernetClassE>:
	...
   b51e4:	46bf 000b 46b5 000b 46ab 000b 46a1 000b     .F...F...F...F..
   b51f4:	4695 000b 4689 000b 4899 000b 48a1 000b     .F...F...H...H..
   b5204:	467d 000b 4675 000b 466b 000b 4661 000b     }F..uF..kF..aF..
   b5214:	48d1 000b                                   .H..

000b5218 <_ZTV7TwoWire>:
	...
   b5220:	46dd 000b 4727 000b 46ff 000b 46df 000b     .F..'G...F...F..
   b5230:	4707 000b 470f 000b 4717 000b 471f 000b     .G...G...G...G..

000b5240 <_ZTV9IPAddress>:
	...
   b5248:	4769 000b 4759 000b 475b 000b 7061 0070     iG..YG..[G..app.

000b5258 <_ZTVN5spark12NetworkClassE>:
	...
   b5260:	4859 000b 4863 000b 486d 000b 4877 000b     YH..cH..mH..wH..
   b5270:	4881 000b 488d 000b 4899 000b 48a1 000b     .H...H...H...H..
   b5280:	48a9 000b 48b5 000b 48bd 000b 48c7 000b     .H...H...H...H..
   b5290:	48d1 000b 5925 252d 2d6d 6425 2554 3a48     .H..%Y-%m-%dT%H:
   b52a0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b52b0 <_ZTV11USARTSerial>:
	...
   b52b8:	4ac1 000b 4b2d 000b 4b05 000b 49bd 000b     .J..-K...K...I..
   b52c8:	4ad5 000b 4af1 000b 4ae3 000b 4aff 000b     .J...J...J...J..
   b52d8:	4ac3 000b 4ac7 000b                         .J...J..

000b52e0 <_ZTV9USBSerial>:
	...
   b52e8:	4b6b 000b 4bd3 000b 4ba9 000b 49bd 000b     kK...K...K...I..
   b52f8:	4b9b 000b 4b6d 000b 4b7d 000b 4bcd 000b     .K..mK..}K...K..
   b5308:	4b8d 000b 4b65 000b                         .K..eK..

000b5310 <_ZTVN5spark9WiFiClassE>:
	...
   b5318:	4ccb 000b 4cc1 000b 4cb7 000b 4c6d 000b     .L...L...L..mL..
   b5328:	4cab 000b 4c9f 000b 4899 000b 48a1 000b     .L...L...H...H..
   b5338:	4c93 000b 4c8b 000b 4c81 000b 4c77 000b     .L...L...L..wL..
   b5348:	48d1 000b                                   .H..

000b534c <_ZSt7nothrow>:
   b534c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b535c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b536c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b537c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b538c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b539c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b53ac:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b53bd <link_const_variable_data_end>:
   b53bd:	00          	.byte	0x00
	...

000b53c0 <link_constructors_location>:
   b53c0:	000b4251 	.word	0x000b4251
   b53c4:	000b4651 	.word	0x000b4651
   b53c8:	000b46c9 	.word	0x000b46c9
   b53cc:	000b4849 	.word	0x000b4849
   b53d0:	000b49a9 	.word	0x000b49a9
   b53d4:	000b4a69 	.word	0x000b4a69
   b53d8:	000b4a89 	.word	0x000b4a89
   b53dc:	000b4aad 	.word	0x000b4aad
   b53e0:	000b4cd5 	.word	0x000b4cd5

000b53e4 <link_constructors_end>:
	...
